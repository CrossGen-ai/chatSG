
> backend@1.0.0 dev
> nodemon server.js

[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): server.js src/**/* utils/**/*[39m
[33m[nodemon] watching extensions: js,json[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.0.83
===================================
[Mem0Service] Failed to connect to Python service: 
[Mem0Service] Python service is not running. Start it with: cd python-mem0 && ./scripts/start.sh
[Server] Failed to initialize storage manager: AxiosError [AggregateError]
    at AxiosError.from (/Users/crossgenai/sg/chatSG/backend/node_modules/axios/dist/node/axios.cjs:863:14)
    at RedirectableRequest.handleRequestError (/Users/crossgenai/sg/chatSG/backend/node_modules/axios/dist/node/axios.cjs:3187:25)
    at RedirectableRequest.emit (node:events:519:35)
    at eventHandlers.<computed> (/Users/crossgenai/sg/chatSG/backend/node_modules/follow-redirects/index.js:49:24)
    at ClientRequest.emit (node:events:507:28)
    at emitErrorEvent (node:_http_client:104:11)
    at Socket.socketErrorListener (node:_http_client:518:5)
    at Socket.emit (node:events:507:28)
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3)
    at Axios.request (/Users/crossgenai/sg/chatSG/backend/node_modules/axios/dist/node/axios.cjs:4276:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async Mem0Service.initialize (/Users/crossgenai/sg/chatSG/backend/dist/src/memory/Mem0Service.js:100:28)
    at async StorageManager.initialize (/Users/crossgenai/sg/chatSG/backend/dist/src/storage/StorageManager.js:85:13) {
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8001
        at createConnectionError (node:net:1677:14)
        at afterConnectMultiple (node:net:1707:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8001
    },
    Error: connect ECONNREFUSED 127.0.0.1:8001
        at createConnectionError (node:net:1677:14)
        at afterConnectMultiple (node:net:1707:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8001
    }
  ],
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: { FormData: [Function [FormData]], Blob: [class Blob] },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.9.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8001',
    method: 'get',
    url: '/health',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [Array],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 65536,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/health',
      method: 'GET',
      headers: [Object: null prototype],
      agents: [Object],
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: [Object],
      hostname: 'localhost',
      port: '8001',
      agent: undefined,
      nativeProtocols: [Object],
      pathname: '/health'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      _header: 'GET /health HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.9.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8001\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: [Agent],
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/health',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *1],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: [Socket],
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8001/health',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1139:18)
      at afterConnectMultiple (node:net:1714:7) {
    code: 'ECONNREFUSED',
    [errors]: [ [Error], [Error] ]
  }
}
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/config/security
[Session] Cookie header: csrf-token=2328ad0d1b856d4abe28a6c7a5d66f5250792ea04d445200b8afdcff9f717cb6; csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/auth/user
[Session] Cookie header: csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/auth/user
[Session] Cookie header: csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[Database Pool] New client connected
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Token created: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  ip: '::1',
  connectionRemoteAddress: '::1',
  socketRemoteAddress: '::1',
  headers: { 'x-forwarded-for': undefined, 'x-real-ip': undefined }
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Database Pool] New client connected
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/config/security
[Session] Cookie header: csrf-token=2328ad0d1b856d4abe28a6c7a5d66f5250792ea04d445200b8afdcff9f717cb6; csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/chats
[Session] Cookie header: csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/chats
[Session] Cookie header: csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/config/security
[Session] Cookie header: csrf-token=2328ad0d1b856d4abe28a6c7a5d66f5250792ea04d445200b8afdcff9f717cb6; csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[HTTP-Adapter] Parsed cookies: {
  'csrf-token': '35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75',
  __clerk_db_jwt: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __clerk_db_jwt_V2yMOE4L: 'dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4',
  __refresh_V2yMOE4L: '0FJugPnAVOoi9OcIw0OI',
  __stripe_mid: 'daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a',
  __client_uat_V2yMOE4L: '1748540712',
  __client_uat: '1748540712',
  ajs_anonymous_id: '16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109',
  'sb-mndbkvmozigubebfjazg-auth-token': 'base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0',
  __next_hmr_refresh_hash__: '4',
  clerk_active_context: 'sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:',
  _streamlit_xsrf: '2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
  chatsg_session: 's%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k'
}
[Session] Processing request: GET /api/config/security
[Session] Cookie header: csrf-token=2328ad0d1b856d4abe28a6c7a5d66f5250792ea04d445200b8afdcff9f717cb6; csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860; chatsg_session=s%3A7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_.DnBWA4sgm5nmwRaDicXqdT7gMDZTjeMdB0CNpdRMv8k
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/chats
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/chats
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Session] Session ID: 7cbTN_m3fhrCnCrdWossTlzAkqiJWmr_
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T06:34:19.199Z",
    "secure": false,
    "httpOnly": true,
    "path": "/",
    "sameSite": "lax"
  },
  "authState": {
    "state": "f434fdf60ab092a39844f4fbf84998811842b9615bf0daee9c38618def81c5cd",
    "nonce": "0321f59e3eae98ee3095fb1c4ab399caab624eceaaab1979ad2d3671d7f6d879"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T06:34:19.199Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[HTTP-Adapter] No cookie header found
[Session] Processing request: GET /api/auth/test-config
[Session] Cookie header: undefined
[Session] Request protocol: http
[Session] X-Forwarded-Proto: undefined
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[Session] Session ID: vOpn6-18rRyWTukEVgeMTclNkpOVxbJA
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T20:47:59.538Z",
    "secure": false,
    "httpOnly": true,
    "domain": "localhost",
    "path": "/",
    "sameSite": "lax"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T20:47:59.538Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax',
  domain: 'localhost'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/auth/test-config
[Server] Security middleware passed for GET /api/auth/test-config
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'c0a360a1604195676dd3...',
  expiresIn: '3593s'
}
[CSRF-Header] Calling next() for GET /api/auth/test-config
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/test-config
[HTTP-Adapter] No cookie header found
[HTTP-Adapter] No cookie header found
[HTTP-Adapter] Proxy detected: {
  protocol: 'https',
  ip: '51.54.96.228, 10.2.0.1',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '51.54.96.228, 10.2.0.1'
}
[Session] Processing request: GET /api/auth/test-config
[Session] Cookie header: undefined
[Session] Request protocol: https
[Session] X-Forwarded-Proto: https
[Session] Cookie config: { secure: false, sameSite: 'lax', domain: 'localhost', path: '/' }
[Session] Session ID: n6URsci32TNUPA0PI56osf4wH1azIW3W
[Session] Session data: {
  "cookie": {
    "originalMaxAge": 86400000,
    "expires": "2025-07-13T20:47:59.544Z",
    "secure": false,
    "httpOnly": true,
    "domain": "localhost",
    "path": "/",
    "sameSite": "lax"
  }
}
[Session] Session new? undefined
[Session] Session cookie: {
  path: '/',
  _expires: 2025-07-13T20:47:59.544Z,
  originalMaxAge: 86400000,
  httpOnly: true,
  secure: false,
  sameSite: 'lax',
  domain: 'localhost'
}
[Session] Set-Cookie header: undefined
[Server] Applying security middleware for GET /api/auth/test-config
[Server] Security middleware passed for GET /api/auth/test-config
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Token created: {
  sessionId: '51.54.96.228, 10.2.0.1',
  token: 'efc3a7cf8dcf7940fff8...',
  ip: '51.54.96.228, 10.2.0.1',
  connectionRemoteAddress: '::1',
  socketRemoteAddress: '::1',
  headers: {
    'x-forwarded-for': '51.54.96.228, 10.2.0.1',
    'x-real-ip': undefined
  }
}
[CSRF-Header] Calling next() for GET /api/auth/test-config
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/test-config
[HTTP-Adapter] No cookie header found
[HTTP-Adapter] Proxy detected: {
  protocol: 'https',
  ip: '51.54.96.228, 10.2.0.1',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '51.54.96.228, 10.2.0.1'
}
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using Azure AD authentication provider
[AzureAuth] Initializing with config: {
  clientId: 'present',
  clientSecret: 'present',
  tenantId: 'present',
  authority: 'https://login.microsoftonline.us/your-tenant-id',
  redirectUri: 'http://localhost:3000/api/auth/callback'
}
[AzureAuth] Initialized successfully with scopes: [ 'openid', 'profile', 'email', 'User.Read' ]
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai API key (length: 164)
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai embedding model: text-embedding-3-small
[Mem0Service] Detecting provider from MEM0_MODELS=openai
[Mem0Service] Provider detected: openai
[Mem0Service] Using openai LLM model: gpt-4o-mini
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Database Pool] Creating pool with SSL config: { PGSSL: 'false', DATABASE_SSL: 'false', NODE_ENV: 'development' }
[Orchestrator] Initialized with 5 specialized agents
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Mem0Service] Python service health: { status: 'healthy', provider: 'openai', initialized: true }
[Mem0Service] Connected to Python service successfully
[Mem0Service] Python service config: {
  provider: 'openai',
  embedding_model: 'text-embedding-3-small',
  llm_model: 'gpt-4o-mini',
  vector_store_provider: 'qdrant',
  graph_enabled: false,
  azure_endpoint: null,
  azure_api_version: null
}
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
