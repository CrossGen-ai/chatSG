
> backend@1.0.0 dev
> nodemon server.js

[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): server.js src/**/* utils/**/*[39m
[33m[nodemon] watching extensions: js,json[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using mock authentication provider
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Mem0Service] Using Qdrant vector store
[Mem0Service] Graph store enabled with Neo4j
[Mem0Service] Initialized successfully
[Orchestrator] Initialized with 5 specialized agents
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Token created: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  ip: '::1',
  connectionRemoteAddress: '::1',
  socketRemoteAddress: '::1',
  headers: { 'x-forwarded-for': undefined, 'x-real-ip': undefined }
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/auth/user
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Applying security middleware for GET /api/config/security
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/settings
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/settings
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/settings
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/settings
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Initialized with config path: /Users/crossgenai/sg/chatSG/backend/dist/config/slash-commands.json
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/messages
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/settings
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/messages
[Server] Applying security middleware for GET /api/slash-commands
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/messages
[Server] Messages endpoint hit: /api/chats/session-b-1752022918798/messages
[Server] Loading messages for session: session-b-1752022918798, offset: 0, limit: 50
[PostgresSessionStorage] Read 2 messages from session session-b-1752022918798
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/settings
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/messages
[Server] Messages endpoint hit: /api/chats/session-b-1752022918798/messages
[Server] Loading messages for session: session-b-1752022918798, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[PostgresSessionStorage] Read 2 messages from session session-b-1752022918798
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for POST /api/chats
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chats
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chats
[Server] POST /api/chats endpoint hit
[Server] Body already parsed: { title: 'New Chat', metadata: {} }
[Database Pool] New client connected
[PostgresSessionIndex] Created session d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Updated session d8628fb1fd813cef3ca02b43734dc7ba
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Marked session d8628fb1fd813cef3ca02b43734dc7ba as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Messages endpoint hit: /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Loading messages for session: d8628fb1fd813cef3ca02b43734dc7ba, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[PostgresSessionStorage] Read 0 messages from session d8628fb1fd813cef3ca02b43734dc7ba
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3570s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3566s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: d8628fb1fd813cef3ca02b43734dc7ba, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[ORCHESTRATOR] Error: ReferenceError: userId is not defined
    at handleSSERequest (/Users/crossgenai/sg/chatSG/backend/server.js:545:33)
    at Server.<anonymous> (/Users/crossgenai/sg/chatSG/backend/server.js:963:9)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[Server] Sending SSE event: error { message: 'userId is not defined' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3566s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3566s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3566s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3552s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Messages endpoint hit: /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Loading messages for session: d8628fb1fd813cef3ca02b43734dc7ba, offset: 0, limit: 50
[PostgresSessionStorage] Read 0 messages from session d8628fb1fd813cef3ca02b43734dc7ba
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Messages endpoint hit: /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Loading messages for session: d8628fb1fd813cef3ca02b43734dc7ba, offset: 0, limit: 50
[PostgresSessionStorage] Read 0 messages from session d8628fb1fd813cef3ca02b43734dc7ba
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3551s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3547s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3547s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3547s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: d8628fb1fd813cef3ca02b43734dc7ba, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[ORCHESTRATOR] Error: ReferenceError: userId is not defined
    at handleSSERequest (/Users/crossgenai/sg/chatSG/backend/server.js:545:33)
    at Server.<anonymous> (/Users/crossgenai/sg/chatSG/backend/server.js:963:9)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[Server] Sending SSE event: error { message: 'userId is not defined' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3547s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: '95a52079a1a7ebbe3b18...',
  expiresIn: '3547s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using mock authentication provider
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Mem0Service] Using Qdrant vector store
[Mem0Service] Graph store enabled with Neo4j
[Mem0Service] Initialized successfully
[Orchestrator] Initialized with 5 specialized agents
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
=== ENVIRONMENT DEBUG ===
Current working directory: /Users/crossgenai/sg/chatSG/backend
__dirname: /Users/crossgenai/sg/chatSG/backend
process.env.CHATSG_ENVIRONMENT: dev
process.env.BACKEND: Orch
========================
[Auth] Using mock authentication provider
[Server] Performance monitoring loaded
[Server] Connection diagnostics loaded
[Server] Loaded slash commands router and processor
[Server] Loaded new storage system
[Server] Loaded memory visualization handlers
[StorageManager] Initializing with PostgreSQL backend
[PostgresSessionIndex] Initialized with PostgreSQL backend
[MemoryPersistence] Initialized with cleanup interval: 300000ms
[StateManager] Initialized with config: {
  defaultTTL: 86400000,
  maxSessions: 1000,
  maxSharedStates: 10000,
  enablePersistence: true,
  enableEvents: true
}
[AgentOrchestrator] Initialized 3 orchestration strategies
[AgentOrchestrator] Initialized with config: {
  maxRetries: 2,
  timeoutMs: 15000,
  fallbackStrategy: 'sequential',
  enableStateSharing: true
}
[OrchestrationMiddleware] Initialized with config: {
  enableOrchestration: true,
  preserveBackendRouting: true,
  orchestrationMode: 'enhanced',
  enableLogging: true,
  enableMetrics: true
}
[LLMHelper] Initialized with provider: openai
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created AnalyticalAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created CreativeAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created TechnicalAgent successfully
[IndividualAgentFactory] Created CRMAgent successfully
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: false
[IndividualAgentFactory] Created FinancialAgent successfully
[IndividualAgentFactory] Successfully created 5 individual agents
[AgentOrchestrator] Registered agent: AnalyticalAgent (analytical)
[Orchestrator] Registered AnalyticalAgent (analytical) - Specialized agent for data analysis, statistical computations, and research tasks
[AgentOrchestrator] Registered agent: CreativeAgent (creative)
[Orchestrator] Registered CreativeAgent (creative) - Specialized agent for creative writing, brainstorming, and ideation tasks
[AgentOrchestrator] Registered agent: TechnicalAgent (technical)
[Orchestrator] Registered TechnicalAgent (technical) - Specialized agent for technical programming, debugging, and code-related tasks
[AgentOrchestrator] Registered agent: CRMAgent (crm)
[Orchestrator] Registered CRMAgent (crm) - Specialized agent for CRM operations, customer queries, and pipeline management
[AgentOrchestrator] Registered agent: FinancialAgent (financial)
[Orchestrator] Registered FinancialAgent (financial) - Specialized agent for financial analysis, investment research, and economic insights
[Orchestrator] Successfully registered 5 specialized LLM agents
[BackendIntegrationManager] Initializing backend integration...
[BackendIntegrationManager] Initialized with 0 backends
[Orchestrator] Setup created successfully
=== BACKEND CONFIGURATION ===
BACKEND mode: Orch
Legacy ENVIRONMENT: dev
Active backend: Enhanced Orchestrator (Multi-Agent)
Orchestrator initialized: true
=============================
[Mem0Service] Using Qdrant vector store
[Mem0Service] Graph store enabled with Neo4j
[Mem0Service] Initialized successfully
[Orchestrator] Initialized with 5 specialized agents
[StorageManager] Mem0 service initialized
[StorageManager] Initialized
[Server] Storage manager initialized
=== ChatSG Server Configuration ===
- Server running at http://localhost:3000/
- Backend Mode: Orch
- Active Backend: Enhanced Orchestrator (Multi-Agent)
- Legacy Environment: dev
- Orchestrator: Ready
- Registered Agents: 5
- Available Strategies: simple,capability-based,keyword-based
- Environment: development
- Backend Integration: Active
- Registered Backends: 
- VNet IP: 192.168.15.229
===================================
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Token created: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  ip: '::1',
  connectionRemoteAddress: '::1',
  socketRemoteAddress: '::1',
  headers: { 'x-forwarded-for': undefined, 'x-real-ip': undefined }
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/auth/user
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Initialized with config path: /Users/crossgenai/sg/chatSG/backend/dist/config/slash-commands.json
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Messages endpoint hit: /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Loading messages for session: d8628fb1fd813cef3ca02b43734dc7ba, offset: 0, limit: 50
[PostgresSessionStorage] Read 0 messages from session d8628fb1fd813cef3ca02b43734dc7ba
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Messages endpoint hit: /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Loading messages for session: d8628fb1fd813cef3ca02b43734dc7ba, offset: 0, limit: 50
[PostgresSessionStorage] Read 0 messages from session d8628fb1fd813cef3ca02b43734dc7ba
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3593s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'Hello!',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'Hello!',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3593s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'Hello!',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'Hello!',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: d8628fb1fd813cef3ca02b43734dc7ba, message: "Hello!"
[Server] Sending SSE event: connected { sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba' }
[ORCHESTRATOR] Processing with streaming: "Hello!"
[AgentOrchestrator] Selecting agent for session: d8628fb1fd813cef3ca02b43734dc7ba
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:d8628fb1fd813cef3ca02b43734dc7ba, TTL: none
[AgentOrchestrator] Updated agent history for session d8628fb1fd813cef3ca02b43734dc7ba: AnalyticalAgent
[MemoryPersistence] Stored key: session:d8628fb1fd813cef3ca02b43734dc7ba, TTL: none
[AgentOrchestrator] Updated user preferences for session d8628fb1fd813cef3ca02b43734dc7ba: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[AnalyticalAgent] Initializing analytical agent...
[AnalyticalAgent] Analytical agent initialized successfully
[AnalyticalAgent] Processing analytical request: "Hello!..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: d8628fb1fd813cef3ca02b43734dc7ba
[Server] Session check took: 0.92ms
[StorageManager] Context query - SessionId: d8628fb1fd813cef3ca02b43734dc7ba, UserId: 2
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionStorage] Appended message to session d8628fb1fd813cef3ca02b43734dc7ba, id: 174
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3593s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Entity type map: {"hello":"greeting"}
[Mem0Service] Search for "Hello!" returned 0 results
[Mem0Service] Built context with 0 relevant memories
[Mem0Service] Retrieved 0 memories for session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Built complete context: 0 memories + 1 session messages
[AnalyticalAgent] Context retrieval completed in 2501ms
[AnalyticalAgent] Memory status set: { enabled: true, memoryCount: 0, status: 'empty', retrievalTime: 2501 }
[AnalyticalAgent] Mem0 returned 3 context messages
[AnalyticalAgent] Calling LLM with 3 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 2736.27ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "Hello"
[Server] Sending SSE event: token { content: 'Hello' }
[AnalyticalAgent] Token received: "!"
[Server] Sending SSE event: token { content: '!' }
[AnalyticalAgent] Token received: " How"
[Server] Sending SSE event: token { content: ' How' }
[AnalyticalAgent] Token received: " can"
[Server] Sending SSE event: token { content: ' can' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3590s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3590s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " I"
[Server] Sending SSE event: token { content: ' I' }
[AnalyticalAgent] Token received: " assist"
[Server] Sending SSE event: token { content: ' assist' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " today"
[Server] Sending SSE event: token { content: ' today' }
[AnalyticalAgent] Token received: " with"
[Server] Sending SSE event: token { content: ' with' }
[AnalyticalAgent] Token received: " your"
[Server] Sending SSE event: token { content: ' your' }
[AnalyticalAgent] Token received: " analytical"
[Server] Sending SSE event: token { content: ' analytical' }
[AnalyticalAgent] Token received: " needs"
[Server] Sending SSE event: token { content: ' needs' }
[AnalyticalAgent] Token received: "?"
[Server] Sending SSE event: token { content: '?' }
[AnalyticalAgent] Token received: " If"
[Server] Sending SSE event: token { content: ' If' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " have"
[Server] Sending SSE event: token { content: ' have' }
[AnalyticalAgent] Token received: " a"
[Server] Sending SSE event: token { content: ' a' }
[AnalyticalAgent] Token received: " specific"
[Server] Sending SSE event: token { content: ' specific' }
[AnalyticalAgent] Token received: " problem"
[Server] Sending SSE event: token { content: ' problem' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[DEBUG] Entity type map: {"hello":"greeting"}
[AnalyticalAgent] Token received: " data"
[Server] Sending SSE event: token { content: ' data' }
[AnalyticalAgent] Token received: " set"
[Server] Sending SSE event: token { content: ' set' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: "’d"
[Server] Sending SSE event: token { content: '’d' }
[AnalyticalAgent] Token received: " like"
[Server] Sending SSE event: token { content: ' like' }
[AnalyticalAgent] Token received: " analyzed"
[Server] Sending SSE event: token { content: ' analyzed' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " please"
[Server] Sending SSE event: token { content: ' please' }
[AnalyticalAgent] Token received: " let"
[Server] Sending SSE event: token { content: ' let' }
[AnalyticalAgent] Token received: " me"
[Server] Sending SSE event: token { content: ' me' }
[AnalyticalAgent] Token received: " know"
[Server] Sending SSE event: token { content: ' know' }
[AnalyticalAgent] Token received: " the"
[Server] Sending SSE event: token { content: ' the' }
[AnalyticalAgent] Token received: " details"
[Server] Sending SSE event: token { content: ' details' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " and"
[Server] Sending SSE event: token { content: ' and' }
[AnalyticalAgent] Token received: " I"
[Server] Sending SSE event: token { content: ' I' }
[AnalyticalAgent] Token received: "’ll"
[Server] Sending SSE event: token { content: '’ll' }
[AnalyticalAgent] Token received: " be"
[Server] Sending SSE event: token { content: ' be' }
[AnalyticalAgent] Token received: " happy"
[Server] Sending SSE event: token { content: ' happy' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " help"
[Server] Sending SSE event: token { content: ' help' }
[AnalyticalAgent] Token received: " break"
[Server] Sending SSE event: token { content: ' break' }
[AnalyticalAgent] Token received: " it"
[Server] Sending SSE event: token { content: ' it' }
[AnalyticalAgent] Token received: " down"
[Server] Sending SSE event: token { content: ' down' }
[AnalyticalAgent] Token received: " and"
[Server] Sending SSE event: token { content: ' and' }
[AnalyticalAgent] Token received: " provide"
[Server] Sending SSE event: token { content: ' provide' }
[AnalyticalAgent] Token received: " insights"
[Server] Sending SSE event: token { content: ' insights' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (219 chars)
[AnalyticalAgent] Final response length: 219 chars
[PERF:Agent] AnalyticalAgent execution: 4644.96ms
[PERF:LLM] unknown - Total: 4645ms, TTFT: 2736ms, Stream: 1909ms, TPS: 26.2
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 0,
  "status": "empty",
  "retrievalTime": 2501
}
[Server] Performance data collected: {
  database: { totalTime: 0.95, operations: { 'check-session': [Object] } },
  agent: { totalTime: 4646.06, selection: 0.87, execution: 4644.96 },
  llm: { totalTime: 4645.03, ttft: 2736.27, tokens: 50 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  memoryStatus: {
    enabled: true,
    memoryCount: 0,
    status: 'empty',
    retrievalTime: 2501
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 0.95, operations: [Object] },
    agent: { totalTime: 4646.06, selection: 0.87, execution: 4644.96 },
    llm: { totalTime: 4645.03, ttft: 2736.27, tokens: 50 }
  }
}
[Server] Recorded 1 database operations, total: 0.89ms
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[PostgresSessionStorage] Appended message to session d8628fb1fd813cef3ca02b43734dc7ba, id: 175
[Server] Applying security middleware for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Marked session d8628fb1fd813cef3ca02b43734dc7ba as read
[Server] Session marked as read successfully
[DEBUG] Extracted entities: []
[DEBUG] Deleted relationships: [{"source":"hello!","relationship":"","destination":""}]
Error adding to graph memory: Neo4jError: Invalid input ']': expected a node label/relationship type name, '$', '%' or '(' (line 3, column 15 (offset: 75))
"          -[r:]->"
               ^

    at captureStacktrace (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-core/lib/result.js:624:17)
    at new Result (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-core/lib/result.js:112:23)
    at Session._run (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-core/lib/session.js:224:16)
    at Session.run (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-core/lib/session.js:188:27)
    at MemoryGraph._deleteEntities (/Users/crossgenai/sg/chatSG/backend/node_modules/mem0ai/dist/oss/index.js:3779:38)
    at MemoryGraph.add (/Users/crossgenai/sg/chatSG/backend/node_modules/mem0ai/dist/oss/index.js:3521:40)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async _Memory.add (/Users/crossgenai/sg/chatSG/backend/node_modules/mem0ai/dist/oss/index.js:4206:23)
    at async Mem0Service.addMessages (/Users/crossgenai/sg/chatSG/backend/dist/src/memory/Mem0Service.js:151:28)
    at async StorageManager.saveMessage (/Users/crossgenai/sg/chatSG/backend/dist/src/storage/StorageManager.js:153:21) {
  constructor: [Function: Neo4jError] { isRetriable: [Function (anonymous)] },
  gqlStatus: '42001',
  gqlStatusDescription: 'error: syntax error or access rule violation - invalid syntax',
  diagnosticRecord: {
    OPERATION: '',
    OPERATION_CODE: '0',
    CURRENT_SCHEMA: '/',
    _classification: 'CLIENT_ERROR',
    _position: { column: [Integer], offset: [Integer], line: [Integer] }
  },
  classification: 'CLIENT_ERROR',
  rawClassification: 'CLIENT_ERROR',
  code: 'Neo.ClientError.Statement.SyntaxError',
  retriable: false,
  [cause]: GQLError: 42I06: Invalid input ']', expected: a node label/relationship type name, '$', '%' or '('.
      at new GQLError (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-core/lib/error.js:117:24)
      at newGQLError (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-core/lib/error.js:261:12)
      at ResponseHandler._handleErrorCause (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js:199:57)
      at ResponseHandler._handleErrorPayload (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js:193:50)
      at ResponseHandler.handleResponse (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js:116:49)
      at dechunker.onmessage (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/bolt/create.js:74:33)
      at Dechunker._onHeader (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js:196:18)
      at Dechunker.AWAITING_CHUNK (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js:149:25)
      at Dechunker.write (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js:206:32)
      at channel.onmessage (/Users/crossgenai/sg/chatSG/backend/node_modules/neo4j-driver-bolt-connection/lib/bolt/create.js:70:63) {
    constructor: [Function: GQLError],
    cause: undefined,
    gqlStatus: '42I06',
    gqlStatusDescription: "error: syntax error or access rule violation - invalid input. Invalid input ']', expected: a node label/relationship type name, '$', '%' or '('.",
    diagnosticRecord: {
      OPERATION: '',
      OPERATION_CODE: '0',
      CURRENT_SCHEMA: '/',
      _classification: 'CLIENT_ERROR',
      _position: [Object]
    },
    classification: 'CLIENT_ERROR',
    rawClassification: 'CLIENT_ERROR'
  }
}
[Mem0Service] Added 1 messages to memory for session d8628fb1fd813cef3ca02b43734dc7ba, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Saved user message to session d8628fb1fd813cef3ca02b43734dc7ba
[PERF:DB] Slow query 'save-user-message': 7478.78ms
[Server] Message save took: 7478.87ms
[Server] Total session operations took: 7479.94ms
[DEBUG] Entity type map: {"hello":"greeting","analytical_needs":"concept","problem":"concept","data_set":"concept","details":"concept","insights":"concept"}
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3585s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  activeSessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: d8628fb1fd813cef3ca02b43734dc7ba, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[AgentOrchestrator] Selecting agent for session: d8628fb1fd813cef3ca02b43734dc7ba
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:d8628fb1fd813cef3ca02b43734dc7ba, TTL: none
[AgentOrchestrator] Updated agent history for session d8628fb1fd813cef3ca02b43734dc7ba: AnalyticalAgent
[MemoryPersistence] Stored key: session:d8628fb1fd813cef3ca02b43734dc7ba, TTL: none
[AgentOrchestrator] Updated user preferences for session d8628fb1fd813cef3ca02b43734dc7ba: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba'
}
[AnalyticalAgent] Processing analytical request: "what is my name?..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: d8628fb1fd813cef3ca02b43734dc7ba
[Server] Session check took: 0.77ms
[StorageManager] Context query - SessionId: d8628fb1fd813cef3ca02b43734dc7ba, UserId: 2
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionStorage] Appended message to session d8628fb1fd813cef3ca02b43734dc7ba, id: 176
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3585s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Entity type map: {"my":"personal_pronoun"}
[AnalyticalAgent] Mem0 context retrieval timed out after 10001ms (10s limit), using minimal context
[DEBUG] Entity type map: {"my":"self_reference"}
[DEBUG] Extracted entities: [{"source":"hello","relationship":"greets","destination":"analytical_needs"},{"source":"analytical_needs","relationship":"assisted_by","destination":"2"},{"source":"2","relationship":"wants_to_assist","destination":"problem"},{"source":"2","relationship":"wants_to_assist","destination":"data_set"},{"source":"data_set","relationship":"analyzed_for","destination":"details"},{"source":"details","relationship":"leads_to","destination":"insights"},{"source":"problem","relationship":"analyzed_for","destination":"details"}]
[INFO] Returned 1 search results
[Mem0Service] Search for "what is my name?" returned 0 results
[Mem0Service] Built context with 0 relevant memories
[Mem0Service] Retrieved 0 memories for session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Built complete context: 0 memories + 3 session messages
[AnalyticalAgent] Context retrieval completed in 2703ms
[AnalyticalAgent] Memory status set: { enabled: true, memoryCount: 0, status: 'empty', retrievalTime: 2703 }
[AnalyticalAgent] Mem0 returned 5 context messages
[AnalyticalAgent] Calling LLM with 5 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[DEBUG] Extracted entities: [{"source":"2","relationship":"has_name","destination":"my"}]
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 3315.56ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "I'm"
[Server] Sending SSE event: token { content: "I'm" }
[AnalyticalAgent] Token received: " sorry"
[Server] Sending SSE event: token { content: ' sorry' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3581s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3581s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " but"
[Server] Sending SSE event: token { content: ' but' }
[AnalyticalAgent] Token received: " I"
[Server] Sending SSE event: token { content: ' I' }
[AnalyticalAgent] Token received: " don't"
[Server] Sending SSE event: token { content: " don't" }
[AnalyticalAgent] Token received: " have"
[Server] Sending SSE event: token { content: ' have' }
[AnalyticalAgent] Token received: " access"
[Server] Sending SSE event: token { content: ' access' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " personal"
[Server] Sending SSE event: token { content: ' personal' }
[AnalyticalAgent] Token received: " information"
[Server] Sending SSE event: token { content: ' information' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " including"
[Server] Sending SSE event: token { content: ' including' }
[AnalyticalAgent] Token received: " your"
[Server] Sending SSE event: token { content: ' your' }
[AnalyticalAgent] Token received: " name"
[Server] Sending SSE event: token { content: ' name' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: " If"
[Server] Sending SSE event: token { content: ' If' }
[AnalyticalAgent] Token received: " there's"
[Server] Sending SSE event: token { content: " there's" }
[AnalyticalAgent] Token received: " anything"
[Server] Sending SSE event: token { content: ' anything' }
[AnalyticalAgent] Token received: " specific"
[Server] Sending SSE event: token { content: ' specific' }
[AnalyticalAgent] Token received: " you'd"
[Server] Sending SSE event: token { content: " you'd" }
[AnalyticalAgent] Token received: " like"
[Server] Sending SSE event: token { content: ' like' }
[AnalyticalAgent] Token received: " assistance"
[Server] Sending SSE event: token { content: ' assistance' }
[AnalyticalAgent] Token received: " with"
[Server] Sending SSE event: token { content: ' with' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " feel"
[Server] Sending SSE event: token { content: ' feel' }
[AnalyticalAgent] Token received: " free"
[Server] Sending SSE event: token { content: ' free' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " let"
[Server] Sending SSE event: token { content: ' let' }
[AnalyticalAgent] Token received: " me"
[Server] Sending SSE event: token { content: ' me' }
[AnalyticalAgent] Token received: " know"
[Server] Sending SSE event: token { content: ' know' }
[AnalyticalAgent] Token received: "!"
[Server] Sending SSE event: token { content: '!' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (163 chars)
[AnalyticalAgent] Final response length: 163 chars
[PERF:Agent] AnalyticalAgent execution: 3774.27ms
[PERF:LLM] unknown - Total: 3774ms, TTFT: 3316ms, Stream: 459ms, TPS: 74.1
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 0,
  "status": "empty",
  "retrievalTime": 2703
}
[Server] Performance data collected: {
  database: { totalTime: 0.81, operations: { 'check-session': [Object] } },
  agent: { totalTime: 3774.75, selection: 0.4, execution: 3774.27 },
  llm: { totalTime: 3774.32, ttft: 3315.56, tokens: 34 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: 'd8628fb1fd813cef3ca02b43734dc7ba',
  memoryStatus: {
    enabled: true,
    memoryCount: 0,
    status: 'empty',
    retrievalTime: 2703
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 0.81, operations: [Object] },
    agent: { totalTime: 3774.75, selection: 0.4, execution: 3774.27 },
    llm: { totalTime: 3774.32, ttft: 3315.56, tokens: 34 }
  }
}
[Server] Recorded 1 database operations, total: 0.75ms
[PostgresSessionStorage] Appended message to session d8628fb1fd813cef3ca02b43734dc7ba, id: 177
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Marked session d8628fb1fd813cef3ca02b43734dc7ba as read
[Server] Session marked as read successfully
[DEBUG] Deleted relationships: [{"source":"2","relationship":"has_name","destination":"my"}]
[Mem0Service] Added 1 messages to memory for session d8628fb1fd813cef3ca02b43734dc7ba, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Saved user message to session d8628fb1fd813cef3ca02b43734dc7ba
[PERF:DB] Slow query 'save-user-message': 5476.94ms
[Server] Message save took: 5476.97ms
[Server] Total session operations took: 5477.79ms
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for POST /api/chats
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chats
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chats
[Server] POST /api/chats endpoint hit
[Server] Body already parsed: { title: 'New Chat', metadata: {} }
[PostgresSessionIndex] Created session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PostgresSessionIndex] Updated session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PostgresSessionIndex] Marked session a3e4ca7b3cedce4f6bcbe4d454d2aa33 as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] Applying security middleware for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] Security middleware passed for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] Messages endpoint hit: /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] Loading messages for session: a3e4ca7b3cedce4f6bcbe4d454d2aa33, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Database Pool] New client connected
[PostgresSessionStorage] Read 0 messages from session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3579s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Entity type map: {"i":"self-reference","your_name":"generic_person"}
[DEBUG] Extracted entities: [{"source":"2","relationship":"has_no_access_to","destination":"your_name"},{"source":"2","relationship":"offers_assistance_on","destination":"any_specific_request"}]
[DEBUG] Deleted relationships: [{"source":"problem","relationship":"broken_down_by","destination":"2"},{"source":"problem","relationship":"requires_analysis_of","destination":"data_set"}]
[AnalyticalAgent] Mem0 context retrieval timed out after 10001ms (10s limit), using minimal context
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33',
  activeSessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33',
  activeSessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3574s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33',
  activeSessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33',
  activeSessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: a3e4ca7b3cedce4f6bcbe4d454d2aa33, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[AgentOrchestrator] Selecting agent for session: a3e4ca7b3cedce4f6bcbe4d454d2aa33
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:a3e4ca7b3cedce4f6bcbe4d454d2aa33, TTL: none
[AgentOrchestrator] Updated agent history for session a3e4ca7b3cedce4f6bcbe4d454d2aa33: AnalyticalAgent
[MemoryPersistence] Stored key: session:a3e4ca7b3cedce4f6bcbe4d454d2aa33, TTL: none
[AgentOrchestrator] Updated user preferences for session a3e4ca7b3cedce4f6bcbe4d454d2aa33: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33'
}
[AnalyticalAgent] Processing analytical request: "what is my name?..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: a3e4ca7b3cedce4f6bcbe4d454d2aa33
[StorageManager] Context query - SessionId: a3e4ca7b3cedce4f6bcbe4d454d2aa33, UserId: 2
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3574s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Session check took: 5.22ms
[PostgresSessionStorage] Appended message to session a3e4ca7b3cedce4f6bcbe4d454d2aa33, id: 178
[DEBUG] Entity type map: {"my":"pronoun"}
[DEBUG] Deleted relationships: [{"source":"2","relationship":"does_not_have_access_to","destination":"your_name"},{"source":"2","relationship":"is","destination":"my_name"}]
[DEBUG] Entity type map: {"my":"pronoun"}
[INFO] Returned 1 search results
[Mem0Service] Search for "what is my name?" returned 0 results
[Mem0Service] Built context with 0 relevant memories
[Mem0Service] Retrieved 0 memories for session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[StorageManager] Built complete context: 0 memories + 1 session messages
[AnalyticalAgent] Context retrieval completed in 2402ms
[AnalyticalAgent] Memory status set: { enabled: true, memoryCount: 0, status: 'empty', retrievalTime: 2402 }
[AnalyticalAgent] Mem0 returned 3 context messages
[AnalyticalAgent] Calling LLM with 3 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[DEBUG] Extracted entities: [{"source":"2","relationship":"has_name","destination":"my"}]
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 2936.16ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "I'm"
[Server] Sending SSE event: token { content: "I'm" }
[AnalyticalAgent] Token received: " unable"
[Server] Sending SSE event: token { content: ' unable' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3571s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3571s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " determine"
[Server] Sending SSE event: token { content: ' determine' }
[AnalyticalAgent] Token received: " your"
[Server] Sending SSE event: token { content: ' your' }
[AnalyticalAgent] Token received: " name"
[Server] Sending SSE event: token { content: ' name' }
[AnalyticalAgent] Token received: " based"
[Server] Sending SSE event: token { content: ' based' }
[AnalyticalAgent] Token received: " on"
[Server] Sending SSE event: token { content: ' on' }
[Mem0Service] Added 1 messages to memory for session d8628fb1fd813cef3ca02b43734dc7ba, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Updated session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Saved assistant message to session d8628fb1fd813cef3ca02b43734dc7ba
[AnalyticalAgent] Token received: " the"
[Server] Sending SSE event: token { content: ' the' }
[AnalyticalAgent] Token received: " information"
[Server] Sending SSE event: token { content: ' information' }
[AnalyticalAgent] Token received: " provided"
[Server] Sending SSE event: token { content: ' provided' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: " If"
[Server] Sending SSE event: token { content: ' If' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " have"
[Server] Sending SSE event: token { content: ' have' }
[AnalyticalAgent] Token received: " any"
[Server] Sending SSE event: token { content: ' any' }
[AnalyticalAgent] Token received: " specific"
[Server] Sending SSE event: token { content: ' specific' }
[AnalyticalAgent] Token received: " data"
[Server] Sending SSE event: token { content: ' data' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[AnalyticalAgent] Token received: " context"
[Server] Sending SSE event: token { content: ' context' }
[AnalyticalAgent] Token received: " you'd"
[Server] Sending SSE event: token { content: " you'd" }
[AnalyticalAgent] Token received: " like"
[Server] Sending SSE event: token { content: ' like' }
[AnalyticalAgent] Token received: " analyzed"
[Server] Sending SSE event: token { content: ' analyzed' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " please"
[Server] Sending SSE event: token { content: ' please' }
[AnalyticalAgent] Token received: " let"
[Server] Sending SSE event: token { content: ' let' }
[AnalyticalAgent] Token received: " me"
[Server] Sending SSE event: token { content: ' me' }
[AnalyticalAgent] Token received: " know"
[Server] Sending SSE event: token { content: ' know' }
[AnalyticalAgent] Token received: " how"
[Server] Sending SSE event: token { content: ' how' }
[AnalyticalAgent] Token received: " I"
[Server] Sending SSE event: token { content: ' I' }
[AnalyticalAgent] Token received: " can"
[Server] Sending SSE event: token { content: ' can' }
[AnalyticalAgent] Token received: " assist"
[Server] Sending SSE event: token { content: ' assist' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: "!"
[Server] Sending SSE event: token { content: '!' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (171 chars)
[AnalyticalAgent] Final response length: 171 chars
[PERF:Agent] AnalyticalAgent execution: 3713.51ms
[PERF:LLM] unknown - Total: 3714ms, TTFT: 2936ms, Stream: 777ms, TPS: 46.3
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 0,
  "status": "empty",
  "retrievalTime": 2402
}
[Server] Performance data collected: {
  database: { totalTime: 5.24, operations: { 'check-session': [Object] } },
  agent: { totalTime: 3714.13, selection: 0.49, execution: 3713.51 },
  llm: { totalTime: 3713.53, ttft: 2936.16, tokens: 36 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: 'a3e4ca7b3cedce4f6bcbe4d454d2aa33',
  memoryStatus: {
    enabled: true,
    memoryCount: 0,
    status: 'empty',
    retrievalTime: 2402
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 5.24, operations: [Object] },
    agent: { totalTime: 3714.13, selection: 0.49, execution: 3713.51 },
    llm: { totalTime: 3713.53, ttft: 2936.16, tokens: 36 }
  }
}
[Server] Recorded 1 database operations, total: 5.20ms
[PostgresSessionStorage] Appended message to session a3e4ca7b3cedce4f6bcbe4d454d2aa33, id: 179
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PostgresSessionIndex] Marked session a3e4ca7b3cedce4f6bcbe4d454d2aa33 as read
[Server] Session marked as read successfully
[DEBUG] Deleted relationships: [{"source":"2","relationship":"has_name","destination":"my"}]
[Mem0Service] Added 1 messages to memory for session a3e4ca7b3cedce4f6bcbe4d454d2aa33, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[StorageManager] Saved user message to session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PERF:DB] Slow query 'save-user-message': 5148.02ms
[Server] Message save took: 5148.04ms
[Server] Total session operations took: 5153.29ms
[DEBUG] Entity type map: {"i":"self_reference","your_name":"unknown","specific_data":"unknown","context":"unknown"}
[Mem0Service] Added 1 messages to memory for session d8628fb1fd813cef3ca02b43734dc7ba, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Updated session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Saved assistant message to session d8628fb1fd813cef3ca02b43734dc7ba
[DEBUG] Extracted entities: [{"source":"2","relationship":"unable_to_determine","destination":"your_name"},{"source":"2","relationship":"request_analysis_of","destination":"specific_data"},{"source":"2","relationship":"request_analysis_of","destination":"context"}]
[AnalyticalAgent] Mem0 context retrieval timed out after 10001ms (10s limit), using minimal context
[Server] Applying security middleware for GET /api/config/markdown
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/messages
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for PATCH /api/chats/session-a-1752022390346/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/messages
[Server] Messages endpoint hit: /api/chats/session-a-1752022390346/messages
[Server] Loading messages for session: session-a-1752022390346, offset: 0, limit: 50
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[PostgresSessionStorage] Read 3 messages from session session-a-1752022390346
[Server] Security middleware passed for PATCH /api/chats/session-a-1752022390346/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/session-a-1752022390346/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: session-a-1752022390346
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[PostgresSessionIndex] Marked session session-a-1752022390346 as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3563s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Deleted relationships: [{"source":"2","relationship":"has_no_access_to","destination":"your_name"},{"source":"context","relationship":"provides","destination":"details"}]
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'session-a-1752022390346',
  activeSessionId: 'session-a-1752022390346'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'session-a-1752022390346',
  activeSessionId: 'session-a-1752022390346'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3557s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'session-a-1752022390346',
  activeSessionId: 'session-a-1752022390346'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: 'session-a-1752022390346',
  activeSessionId: 'session-a-1752022390346'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: session-a-1752022390346, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: 'session-a-1752022390346' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[AgentOrchestrator] Selecting agent for session: session-a-1752022390346
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:session-a-1752022390346, TTL: none
[AgentOrchestrator] Updated agent history for session session-a-1752022390346: AnalyticalAgent
[MemoryPersistence] Stored key: session:session-a-1752022390346, TTL: none
[AgentOrchestrator] Updated user preferences for session session-a-1752022390346: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start { agent: 'AnalyticalAgent', sessionId: 'session-a-1752022390346' }
[AnalyticalAgent] Processing analytical request: "what is my name?..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: session-a-1752022390346
[Server] Session check took: 0.53ms
[StorageManager] Context query - SessionId: session-a-1752022390346, UserId: 2
[PostgresSessionStorage] Appended message to session session-a-1752022390346, id: 180
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3557s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Entity type map: {"my":"self-reference"}
[INFO] Returned 1 search results
[Mem0Service] Search for "what is my name?" returned 0 results
[Mem0Service] Built context with 0 relevant memories
[Mem0Service] Retrieved 0 memories for session session-a-1752022390346
[StorageManager] Built complete context: 0 memories + 4 session messages
[AnalyticalAgent] Context retrieval completed in 2701ms
[AnalyticalAgent] Memory status set: { enabled: true, memoryCount: 0, status: 'empty', retrievalTime: 2701 }
[AnalyticalAgent] Mem0 returned 6 context messages
[AnalyticalAgent] Calling LLM with 6 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[Mem0Service] Added 1 messages to memory for session a3e4ca7b3cedce4f6bcbe4d454d2aa33, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PostgresSessionIndex] Updated session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[StorageManager] Saved assistant message to session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 3103.27ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "Your"
[Server] Sending SSE event: token { content: 'Your' }
[AnalyticalAgent] Token received: " name"
[Server] Sending SSE event: token { content: ' name' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3554s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3554s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " is"
[Server] Sending SSE event: token { content: ' is' }
[AnalyticalAgent] Token received: " Sean"
[Server] Sending SSE event: token { content: ' Sean' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (18 chars)
[AnalyticalAgent] Final response length: 18 chars
[PERF:Agent] AnalyticalAgent execution: 3219.46ms
[PERF:LLM] unknown - Total: 3220ms, TTFT: 3103ms, Stream: 116ms, TPS: 60.2
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 0,
  "status": "empty",
  "retrievalTime": 2701
}
[Server] Performance data collected: {
  database: { totalTime: 0.55, operations: { 'check-session': [Object] } },
  agent: { totalTime: 3220.13, selection: 0.51, execution: 3219.46 },
  llm: { totalTime: 3219.56, ttft: 3103.27, tokens: 7 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: 'session-a-1752022390346',
  memoryStatus: {
    enabled: true,
    memoryCount: 0,
    status: 'empty',
    retrievalTime: 2701
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 0.55, operations: [Object] },
    agent: { totalTime: 3220.13, selection: 0.51, execution: 3219.46 },
    llm: { totalTime: 3219.56, ttft: 3103.27, tokens: 7 }
  }
}
[Server] Recorded 1 database operations, total: 0.51ms
[PostgresSessionStorage] Appended message to session session-a-1752022390346, id: 181
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/session-a-1752022390346/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/session-a-1752022390346/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/session-a-1752022390346/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: session-a-1752022390346
[PostgresSessionIndex] Marked session session-a-1752022390346 as read
[Server] Session marked as read successfully
[DEBUG] Entity type map: {"my":"pronoun"}
[DEBUG] Entity type map: {"sean":"person"}
[DEBUG] Extracted entities: [{"source":"2","relationship":"has_name","destination":"my"}]
[DEBUG] Extracted entities: [{"source":"sean","relationship":"is_name","destination":"2"}]
[DEBUG] Deleted relationships: [{"source":"2","relationship":"name_is","destination":"sean"}]
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3549s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/security
[Server] Passed all middleware, continuing to routing for OPTIONS /api/performance/dashboard
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3549s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/performance/dashboard
[Server] Security middleware passed for GET /api/performance/dashboard
[Server] About to apply CSRF header middleware...
[CSRF-Header] Token created: {
  sessionId: '::ffff:127.0.0.1',
  token: '3311f2c812733047fd92...',
  ip: '::ffff:127.0.0.1',
  connectionRemoteAddress: '::ffff:127.0.0.1',
  socketRemoteAddress: '::ffff:127.0.0.1',
  headers: { 'x-forwarded-for': undefined, 'x-real-ip': undefined }
}
[CSRF-Header] Calling next() for GET /api/performance/dashboard
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/performance/dashboard
[Server] Applying security middleware for GET /api/performance/dashboard
[Server] Security middleware passed for GET /api/performance/dashboard
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::ffff:127.0.0.1',
  token: '3311f2c812733047fd92...',
  expiresIn: '3599s'
}
[CSRF-Header] Calling next() for GET /api/performance/dashboard
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/performance/dashboard
[Mem0Service] Added 1 messages to memory for session session-a-1752022390346, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session session-a-1752022390346
[PostgresSessionIndex] Updated session session-a-1752022390346
[StorageManager] Saved assistant message to session session-a-1752022390346
[DEBUG] Deleted relationships: [{"source":"2","relationship":"has_name","destination":"my"}]
[Server] Applying security middleware for GET /api/memory/postgres/2
[Server] Applying security middleware for GET /api/memory/users
[Server] Security middleware passed for GET /api/memory/postgres/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3548s'
}
[CSRF-Header] Calling next() for GET /api/memory/postgres/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/postgres/2
[Memory API] PostgreSQL visualization request: {
  userId: '2',
  reqUser: {
    id: 2,
    email: 'dev@example.com',
    name: 'Development User',
    groups: [ 'admin' ],
    azureId: 'mock-azure-id'
  },
  isAuthenticated: true,
  headers: {
    host: 'localhost:3000',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0',
    accept: '*/*',
    'accept-language': 'en-US,en;q=0.5',
    'accept-encoding': 'gzip, deflate, br, zstd',
    referer: 'http://localhost:5173/',
    'content-type': 'application/json',
    connection: 'close',
    cookie: 'csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    priority: 'u=0'
  }
}
[Server] Security middleware passed for GET /api/memory/users
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3548s'
}
[CSRF-Header] Calling next() for GET /api/memory/users
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/users
[Server] Applying security middleware for GET /api/memory/users
[Server] Security middleware passed for GET /api/memory/users
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3548s'
}
[CSRF-Header] Calling next() for GET /api/memory/users
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/users
[Server] Applying security middleware for GET /api/memory/postgres/2
[Server] Security middleware passed for GET /api/memory/postgres/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3548s'
}
[CSRF-Header] Calling next() for GET /api/memory/postgres/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/postgres/2
[Memory API] PostgreSQL visualization request: {
  userId: '2',
  reqUser: {
    id: 2,
    email: 'dev@example.com',
    name: 'Development User',
    groups: [ 'admin' ],
    azureId: 'mock-azure-id'
  },
  isAuthenticated: true,
  headers: {
    host: 'localhost:3000',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0',
    accept: '*/*',
    'accept-language': 'en-US,en;q=0.5',
    'accept-encoding': 'gzip, deflate, br, zstd',
    referer: 'http://localhost:5173/',
    'content-type': 'application/json',
    connection: 'close',
    cookie: 'csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    priority: 'u=0'
  }
}
[AnalyticalAgent] Mem0 context retrieval timed out after 10000ms (10s limit), using minimal context
[Mem0Service] Added 1 messages to memory for session session-a-1752022390346, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session session-a-1752022390346
[StorageManager] Saved user message to session session-a-1752022390346
[PERF:DB] Slow query 'save-user-message': 10283.76ms
[Server] Message save took: 10283.82ms
[Server] Total session operations took: 10284.40ms
[Server] Applying security middleware for GET /api/memory/neo4j/2
[Server] Security middleware passed for GET /api/memory/neo4j/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3546s'
}
[CSRF-Header] Calling next() for GET /api/memory/neo4j/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/neo4j/2
[Server] Applying security middleware for GET /api/memory/qdrant/2
[Server] Security middleware passed for GET /api/memory/qdrant/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3545s'
}
[CSRF-Header] Calling next() for GET /api/memory/qdrant/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/qdrant/2
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '3542s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: { title: 'Store Name Session', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Database Pool] New client connected
[Server] Applying security middleware for POST /api/chats
[applyMiddleware] Checking body for POST - req.body: { title: 'Store Name Session', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chats
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: { title: 'Store Name Session', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chats
[Server] POST /api/chats endpoint hit
[Server] Body already parsed: { title: 'Store Name Session', metadata: {} }
[Database Pool] New client connected
[PostgresSessionIndex] Created session 28a217295ad46a6e76096ffb63e3f1af
[PostgresSessionIndex] Updated session 28a217295ad46a6e76096ffb63e3f1af
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'My name is Sean and I work at OpenAI',
  sessionId: '28a217295ad46a6e76096ffb63e3f1af',
  activeSessionId: '28a217295ad46a6e76096ffb63e3f1af'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'My name is Sean and I work at OpenAI',
  sessionId: '28a217295ad46a6e76096ffb63e3f1af',
  activeSessionId: '28a217295ad46a6e76096ffb63e3f1af'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'My name is Sean and I work at OpenAI',
  sessionId: '28a217295ad46a6e76096ffb63e3f1af',
  activeSessionId: '28a217295ad46a6e76096ffb63e3f1af'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'My name is Sean and I work at OpenAI',
  sessionId: '28a217295ad46a6e76096ffb63e3f1af',
  activeSessionId: '28a217295ad46a6e76096ffb63e3f1af'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: 28a217295ad46a6e76096ffb63e3f1af, message: "My name is Sean and I work at OpenAI"
[Server] Sending SSE event: connected { sessionId: '28a217295ad46a6e76096ffb63e3f1af' }
[ORCHESTRATOR] Processing with streaming: "My name is Sean and I work at OpenAI"
[AgentOrchestrator] Selecting agent for session: 28a217295ad46a6e76096ffb63e3f1af
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:28a217295ad46a6e76096ffb63e3f1af, TTL: none
[AgentOrchestrator] Updated agent history for session 28a217295ad46a6e76096ffb63e3f1af: AnalyticalAgent
[MemoryPersistence] Stored key: session:28a217295ad46a6e76096ffb63e3f1af, TTL: none
[AgentOrchestrator] Updated user preferences for session 28a217295ad46a6e76096ffb63e3f1af: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: '28a217295ad46a6e76096ffb63e3f1af'
}
[AnalyticalAgent] Processing analytical request: "My name is Sean and I work at OpenAI..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: 28a217295ad46a6e76096ffb63e3f1af
[StorageManager] Context query - SessionId: 28a217295ad46a6e76096ffb63e3f1af, UserId: 2
[Database Pool] New client connected
[Server] Session check took: 4.51ms
[PostgresSessionStorage] Appended message to session 28a217295ad46a6e76096ffb63e3f1af, id: 182
[DEBUG] Entity type map: {"sean":"person","openai":"organization"}
[DEBUG] Entity type map: {"sean":"person","openai":"organization"}
[INFO] Returned 5 search results
[Mem0Service] Search for "My name is Sean and I work at OpenAI" returned 1 results
[Mem0Service] Built context with 1 relevant memories
[Mem0Service] Retrieved 2 memories for session 28a217295ad46a6e76096ffb63e3f1af
[StorageManager] Built complete context: 1 memories + 1 session messages
[AnalyticalAgent] Context retrieval completed in 5320ms
[AnalyticalAgent] Memory status set: {
  enabled: true,
  memoryCount: 1,
  status: 'loaded',
  retrievalTime: 5320
}
[AnalyticalAgent] Mem0 returned 4 context messages
[AnalyticalAgent] Calling LLM with 4 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 5619.83ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "Hello"
[Server] Sending SSE event: token { content: 'Hello' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " Sean"
[Server] Sending SSE event: token { content: ' Sean' }
[AnalyticalAgent] Token received: "!"
[Server] Sending SSE event: token { content: '!' }
[AnalyticalAgent] Token received: " It's"
[Server] Sending SSE event: token { content: " It's" }
[AnalyticalAgent] Token received: " great"
[Server] Sending SSE event: token { content: ' great' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " meet"
[Server] Sending SSE event: token { content: ' meet' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: " How"
[Server] Sending SSE event: token { content: ' How' }
[AnalyticalAgent] Token received: " can"
[Server] Sending SSE event: token { content: ' can' }
[AnalyticalAgent] Token received: " I"
[Server] Sending SSE event: token { content: ' I' }
[AnalyticalAgent] Token received: " assist"
[Server] Sending SSE event: token { content: ' assist' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " today"
[Server] Sending SSE event: token { content: ' today' }
[AnalyticalAgent] Token received: " with"
[Server] Sending SSE event: token { content: ' with' }
[AnalyticalAgent] Token received: " your"
[Server] Sending SSE event: token { content: ' your' }
[AnalyticalAgent] Token received: " analytical"
[Server] Sending SSE event: token { content: ' analytical' }
[AnalyticalAgent] Token received: " tasks"
[Server] Sending SSE event: token { content: ' tasks' }
[AnalyticalAgent] Token received: "?"
[Server] Sending SSE event: token { content: '?' }
[AnalyticalAgent] Token received: " Whether"
[Server] Sending SSE event: token { content: ' Whether' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " need"
[Server] Sending SSE event: token { content: ' need' }
[AnalyticalAgent] Token received: " help"
[Server] Sending SSE event: token { content: ' help' }
[AnalyticalAgent] Token received: " breaking"
[Server] Sending SSE event: token { content: ' breaking' }
[AnalyticalAgent] Token received: " down"
[Server] Sending SSE event: token { content: ' down' }
[AnalyticalAgent] Token received: " a"
[Server] Sending SSE event: token { content: ' a' }
[AnalyticalAgent] Token received: " complex"
[Server] Sending SSE event: token { content: ' complex' }
[AnalyticalAgent] Token received: " problem"
[Server] Sending SSE event: token { content: ' problem' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " analyzing"
[Server] Sending SSE event: token { content: ' analyzing' }
[AnalyticalAgent] Token received: " data"
[Server] Sending SSE event: token { content: ' data' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[AnalyticalAgent] Token received: " gaining"
[Server] Sending SSE event: token { content: ' gaining' }
[AnalyticalAgent] Token received: " insights"
[Server] Sending SSE event: token { content: ' insights' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " feel"
[Server] Sending SSE event: token { content: ' feel' }
[AnalyticalAgent] Token received: " free"
[Server] Sending SSE event: token { content: ' free' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " provide"
[Server] Sending SSE event: token { content: ' provide' }
[AnalyticalAgent] Token received: " some"
[Server] Sending SSE event: token { content: ' some' }
[AnalyticalAgent] Token received: " details"
[Server] Sending SSE event: token { content: ' details' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " and"
[Server] Sending SSE event: token { content: ' and' }
[AnalyticalAgent] Token received: " I'll"
[Server] Sending SSE event: token { content: " I'll" }
[AnalyticalAgent] Token received: " do"
[Server] Sending SSE event: token { content: ' do' }
[AnalyticalAgent] Token received: " my"
[Server] Sending SSE event: token { content: ' my' }
[AnalyticalAgent] Token received: " best"
[Server] Sending SSE event: token { content: ' best' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " assist"
[Server] Sending SSE event: token { content: ' assist' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (253 chars)
[AnalyticalAgent] Final response length: 253 chars
[PERF:Agent] AnalyticalAgent execution: 6580.26ms
[PERF:LLM] unknown - Total: 6580ms, TTFT: 5620ms, Stream: 960ms, TPS: 58.3
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 1,
  "status": "loaded",
  "retrievalTime": 5320
}
[Server] Performance data collected: {
  database: { totalTime: 4.53, operations: { 'check-session': [Object] } },
  agent: { totalTime: 6580.5, selection: 0.22, execution: 6580.26 },
  llm: { totalTime: 6580.28, ttft: 5619.83, tokens: 56 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: '28a217295ad46a6e76096ffb63e3f1af',
  memoryStatus: {
    enabled: true,
    memoryCount: 1,
    status: 'loaded',
    retrievalTime: 5320
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 4.53, operations: [Object] },
    agent: { totalTime: 6580.5, selection: 0.22, execution: 6580.26 },
    llm: { totalTime: 6580.28, ttft: 5619.83, tokens: 56 }
  }
}
[Server] Recorded 1 database operations, total: 4.51ms
[PostgresSessionStorage] Appended message to session 28a217295ad46a6e76096ffb63e3f1af, id: 183
[DEBUG] Extracted entities: [{"source":"sean","relationship":"works_at","destination":"openai"}]
[DEBUG] Entity type map: {"sean":"person"}
[DEBUG] Deleted relationships: [{"source":"sean","relationship":"is_name","destination":"2"},{"source":"2","relationship":"works_at","destination":"openai"}]
[AnalyticalAgent] Mem0 context retrieval timed out after 10001ms (10s limit), using minimal context
[Mem0Service] Added 1 messages to memory for session 28a217295ad46a6e76096ffb63e3f1af, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 28a217295ad46a6e76096ffb63e3f1af
[StorageManager] Saved user message to session 28a217295ad46a6e76096ffb63e3f1af
[PERF:DB] Slow query 'save-user-message': 10270.38ms
[Server] Message save took: 10270.39ms
[Server] Total session operations took: 10274.92ms
[DEBUG] Extracted entities: [{"source":"sean","relationship":"is_greeted_by","destination":"2"},{"source":"sean","relationship":"is_offered_assistance_for","destination":"analytical_tasks"}]
[DEBUG] Deleted relationships: [{"source":"sean","relationship":"works_at","destination":"openai"},{"source":"sean","relationship":"has","destination":"task"},{"source":"sean","relationship":"involved_in","destination":"chat_application"},{"source":"sean","relationship":"uses","destination":"typescript"},{"source":"sean","relationship":"likes","destination":"pepperoni_pizza"},{"source":"sean","relationship":"located_in","destination":"california"}]
[Mem0Service] Added 1 messages to memory for session 28a217295ad46a6e76096ffb63e3f1af, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 28a217295ad46a6e76096ffb63e3f1af
[PostgresSessionIndex] Updated session 28a217295ad46a6e76096ffb63e3f1af
[StorageManager] Saved assistant message to session 28a217295ad46a6e76096ffb63e3f1af
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/auth/user
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Messages endpoint hit: /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Loading messages for session: 28a217295ad46a6e76096ffb63e3f1af, offset: 0, limit: 50
[PostgresSessionStorage] Read 2 messages from session 28a217295ad46a6e76096ffb63e3f1af
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Messages endpoint hit: /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Loading messages for session: 28a217295ad46a6e76096ffb63e3f1af, offset: 0, limit: 50
[PostgresSessionStorage] Read 2 messages from session 28a217295ad46a6e76096ffb63e3f1af
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2148s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for POST /api/chats
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chats
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chats
[Server] POST /api/chats endpoint hit
[Server] Body already parsed: { title: 'New Chat', metadata: {} }
[PostgresSessionIndex] Created session 37a01b64e39ce7de599b23b5ff44995d
[PostgresSessionIndex] Updated session 37a01b64e39ce7de599b23b5ff44995d
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 37a01b64e39ce7de599b23b5ff44995d
[PostgresSessionIndex] Marked session 37a01b64e39ce7de599b23b5ff44995d as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] Applying security middleware for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] Security middleware passed for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] Messages endpoint hit: /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] Loading messages for session: 37a01b64e39ce7de599b23b5ff44995d, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[PostgresSessionStorage] Read 0 messages from session 37a01b64e39ce7de599b23b5ff44995d
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2144s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: '37a01b64e39ce7de599b23b5ff44995d',
  activeSessionId: '37a01b64e39ce7de599b23b5ff44995d'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: '37a01b64e39ce7de599b23b5ff44995d',
  activeSessionId: '37a01b64e39ce7de599b23b5ff44995d'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: '37a01b64e39ce7de599b23b5ff44995d',
  activeSessionId: '37a01b64e39ce7de599b23b5ff44995d'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: '37a01b64e39ce7de599b23b5ff44995d',
  activeSessionId: '37a01b64e39ce7de599b23b5ff44995d'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: 37a01b64e39ce7de599b23b5ff44995d, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: '37a01b64e39ce7de599b23b5ff44995d' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[AgentOrchestrator] Selecting agent for session: 37a01b64e39ce7de599b23b5ff44995d
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:37a01b64e39ce7de599b23b5ff44995d, TTL: none
[AgentOrchestrator] Updated agent history for session 37a01b64e39ce7de599b23b5ff44995d: AnalyticalAgent
[MemoryPersistence] Stored key: session:37a01b64e39ce7de599b23b5ff44995d, TTL: none
[AgentOrchestrator] Updated user preferences for session 37a01b64e39ce7de599b23b5ff44995d: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: '37a01b64e39ce7de599b23b5ff44995d'
}
[AnalyticalAgent] Processing analytical request: "what is my name?..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: 37a01b64e39ce7de599b23b5ff44995d
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2140s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Session check took: 0.64ms
[StorageManager] Context query - SessionId: 37a01b64e39ce7de599b23b5ff44995d, UserId: 2
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionStorage] Appended message to session 37a01b64e39ce7de599b23b5ff44995d, id: 184
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2140s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Entity type map: {"my":"self_reference"}
[INFO] Returned 1 search results
[Mem0Service] Search for "what is my name?" returned 2 results
[Mem0Service] Built context with 2 relevant memories
[Mem0Service] Retrieved 2 memories for session 37a01b64e39ce7de599b23b5ff44995d
[StorageManager] Built complete context: 2 memories + 1 session messages
[AnalyticalAgent] Context retrieval completed in 2967ms
[AnalyticalAgent] Memory status set: {
  enabled: true,
  memoryCount: 2,
  status: 'loaded',
  retrievalTime: 2967
}
[AnalyticalAgent] Mem0 returned 5 context messages
[AnalyticalAgent] Calling LLM with 5 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[DEBUG] Entity type map: {"my":"pronoun"}
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 3437.51ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "Your"
[Server] Sending SSE event: token { content: 'Your' }
[AnalyticalAgent] Token received: " name"
[Server] Sending SSE event: token { content: ' name' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2136s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2136s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " is"
[Server] Sending SSE event: token { content: ' is' }
[AnalyticalAgent] Token received: " Sean"
[Server] Sending SSE event: token { content: ' Sean' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (18 chars)
[AnalyticalAgent] Final response length: 18 chars
[PERF:Agent] AnalyticalAgent execution: 3511.55ms
[PERF:LLM] unknown - Total: 3512ms, TTFT: 3438ms, Stream: 74ms, TPS: 94.5
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 2,
  "status": "loaded",
  "retrievalTime": 2967
}
[Server] Performance data collected: {
  database: { totalTime: 0.66, operations: { 'check-session': [Object] } },
  agent: { totalTime: 3511.75, selection: 0.16, execution: 3511.55 },
  llm: { totalTime: 3511.57, ttft: 3437.51, tokens: 7 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: '37a01b64e39ce7de599b23b5ff44995d',
  memoryStatus: {
    enabled: true,
    memoryCount: 2,
    status: 'loaded',
    retrievalTime: 2967
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 0.66, operations: [Object] },
    agent: { totalTime: 3511.75, selection: 0.16, execution: 3511.55 },
    llm: { totalTime: 3511.57, ttft: 3437.51, tokens: 7 }
  }
}
[Server] Recorded 1 database operations, total: 0.63ms
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[PostgresSessionStorage] Appended message to session 37a01b64e39ce7de599b23b5ff44995d, id: 185
[Server] Applying security middleware for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 37a01b64e39ce7de599b23b5ff44995d
[PostgresSessionIndex] Marked session 37a01b64e39ce7de599b23b5ff44995d as read
[Server] Session marked as read successfully
[DEBUG] Extracted entities: [{"source":"2","relationship":"has_name","destination":"my"}]
[DEBUG] Entity type map: {"sean":"person"}
[DEBUG] Extracted entities: [{"source":"sean","relationship":"is","destination":"name"}]
[DEBUG] Deleted relationships: []
[Mem0Service] Added 1 messages to memory for session 37a01b64e39ce7de599b23b5ff44995d, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 37a01b64e39ce7de599b23b5ff44995d
[StorageManager] Saved user message to session 37a01b64e39ce7de599b23b5ff44995d
[PERF:DB] Slow query 'save-user-message': 8195.33ms
[Server] Message save took: 8195.36ms
[Server] Total session operations took: 8196.03ms
[DEBUG] Deleted relationships: [{"source":"sean","relationship":"is_greeted_by","destination":"2"},{"source":"2","relationship":"introduces_to","destination":"sean"}]
[AnalyticalAgent] Mem0 context retrieval timed out after 10000ms (10s limit), using minimal context
[Mem0Service] Added 1 messages to memory for session 37a01b64e39ce7de599b23b5ff44995d, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 37a01b64e39ce7de599b23b5ff44995d
[PostgresSessionIndex] Updated session 37a01b64e39ce7de599b23b5ff44995d
[StorageManager] Saved assistant message to session 37a01b64e39ce7de599b23b5ff44995d
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Database Pool] New client connected
[Server] Applying security middleware for POST /api/chats
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chats
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: { title: 'New Chat', metadata: {} }
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chats
[Server] POST /api/chats endpoint hit
[Server] Body already parsed: { title: 'New Chat', metadata: {} }
[PostgresSessionIndex] Created session 086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Updated session 086e3518c0dea826040a4dd9c91667d4
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Marked session 086e3518c0dea826040a4dd9c91667d4 as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Messages endpoint hit: /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Loading messages for session: 086e3518c0dea826040a4dd9c91667d4, offset: 0, limit: 50
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionStorage] Read 0 messages from session 086e3518c0dea826040a4dd9c91667d4
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2121s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'where do i work?',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'where do i work?',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2117s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'where do i work?',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'where do i work?',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: 086e3518c0dea826040a4dd9c91667d4, message: "where do i work?"
[Server] Sending SSE event: connected { sessionId: '086e3518c0dea826040a4dd9c91667d4' }
[ORCHESTRATOR] Processing with streaming: "where do i work?"
[AgentOrchestrator] Selecting agent for session: 086e3518c0dea826040a4dd9c91667d4
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:086e3518c0dea826040a4dd9c91667d4, TTL: none
[AgentOrchestrator] Updated agent history for session 086e3518c0dea826040a4dd9c91667d4: AnalyticalAgent
[MemoryPersistence] Stored key: session:086e3518c0dea826040a4dd9c91667d4, TTL: none
[AgentOrchestrator] Updated user preferences for session 086e3518c0dea826040a4dd9c91667d4: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[AnalyticalAgent] Processing analytical request: "where do i work?..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Context query - SessionId: 086e3518c0dea826040a4dd9c91667d4, UserId: 2
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2117s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Session check took: 7.53ms
[PostgresSessionStorage] Appended message to session 086e3518c0dea826040a4dd9c91667d4, id: 186
[DEBUG] Entity type map: {"i":"self_reference"}
[DEBUG] Entity type map: {"i":"self_reference"}
[Mem0Service] Search for "where do i work?" returned 2 results
[Mem0Service] Built context with 2 relevant memories
[Mem0Service] Retrieved 2 memories for session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Built complete context: 2 memories + 1 session messages
[AnalyticalAgent] Context retrieval completed in 2668ms
[AnalyticalAgent] Memory status set: {
  enabled: true,
  memoryCount: 2,
  status: 'loaded',
  retrievalTime: 2668
}
[AnalyticalAgent] Mem0 returned 5 context messages
[AnalyticalAgent] Calling LLM with 5 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 3124.20ms
[Server] Sending SSE event: token { content: '' }
[DEBUG] Extracted entities: [{"source":"2","relationship":"works_at","destination":"i"}]
[AnalyticalAgent] Token received: "Based"
[Server] Sending SSE event: token { content: 'Based' }
[AnalyticalAgent] Token received: " on"
[Server] Sending SSE event: token { content: ' on' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2113s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2113s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " the"
[Server] Sending SSE event: token { content: ' the' }
[AnalyticalAgent] Token received: " context"
[Server] Sending SSE event: token { content: ' context' }
[AnalyticalAgent] Token received: " provided"
[Server] Sending SSE event: token { content: ' provided' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " work"
[Server] Sending SSE event: token { content: ' work' }
[AnalyticalAgent] Token received: " at"
[Server] Sending SSE event: token { content: ' at' }
[AnalyticalAgent] Token received: " Open"
[Server] Sending SSE event: token { content: ' Open' }
[AnalyticalAgent] Token received: "AI"
[Server] Sending SSE event: token { content: 'AI' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: " If"
[Server] Sending SSE event: token { content: ' If' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " need"
[Server] Sending SSE event: token { content: ' need' }
[AnalyticalAgent] Token received: " further"
[Server] Sending SSE event: token { content: ' further' }
[AnalyticalAgent] Token received: " details"
[Server] Sending SSE event: token { content: ' details' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[AnalyticalAgent] Token received: " have"
[Server] Sending SSE event: token { content: ' have' }
[AnalyticalAgent] Token received: " specific"
[Server] Sending SSE event: token { content: ' specific' }
[AnalyticalAgent] Token received: " questions"
[Server] Sending SSE event: token { content: ' questions' }
[AnalyticalAgent] Token received: " about"
[Server] Sending SSE event: token { content: ' about' }
[AnalyticalAgent] Token received: " your"
[Server] Sending SSE event: token { content: ' your' }
[AnalyticalAgent] Token received: " role"
[Server] Sending SSE event: token { content: ' role' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[AnalyticalAgent] Token received: " responsibilities"
[Server] Sending SSE event: token { content: ' responsibilities' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " feel"
[Server] Sending SSE event: token { content: ' feel' }
[AnalyticalAgent] Token received: " free"
[Server] Sending SSE event: token { content: ' free' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " ask"
[Server] Sending SSE event: token { content: ' ask' }
[AnalyticalAgent] Token received: "!"
[Server] Sending SSE event: token { content: '!' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (160 chars)
[AnalyticalAgent] Final response length: 160 chars
[PERF:Agent] AnalyticalAgent execution: 3761.31ms
[PERF:LLM] unknown - Total: 3761ms, TTFT: 3124ms, Stream: 637ms, TPS: 53.4
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 2,
  "status": "loaded",
  "retrievalTime": 2668
}
[Server] Performance data collected: {
  database: { totalTime: 7.5, operations: { 'check-session': [Object] } },
  agent: { totalTime: 3761.59, selection: 0.21, execution: 3761.31 },
  llm: { totalTime: 3761.32, ttft: 3124.2, tokens: 34 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  memoryStatus: {
    enabled: true,
    memoryCount: 2,
    status: 'loaded',
    retrievalTime: 2668
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 7.5, operations: [Object] },
    agent: { totalTime: 3761.59, selection: 0.21, execution: 3761.31 },
    llm: { totalTime: 3761.32, ttft: 3124.2, tokens: 34 }
  }
}
[Server] Recorded 1 database operations, total: 7.47ms
[PostgresSessionStorage] Appended message to session 086e3518c0dea826040a4dd9c91667d4, id: 187
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Marked session 086e3518c0dea826040a4dd9c91667d4 as read
[Server] Session marked as read successfully
[DEBUG] Deleted relationships: []
[DEBUG] Entity type map: {"openai":"organization"}
[Mem0Service] Added 1 messages to memory for session 086e3518c0dea826040a4dd9c91667d4, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Saved user message to session 086e3518c0dea826040a4dd9c91667d4
[PERF:DB] Slow query 'save-user-message': 5986.55ms
[Server] Message save took: 5986.72ms
[Server] Total session operations took: 5994.31ms
[DEBUG] Extracted entities: [{"source":"2","relationship":"works_at","destination":"openai"}]
[DEBUG] Deleted relationships: [{"source":"2","relationship":"works_at","destination":"old_company"},{"source":"2","relationship":"works_at","destination":"another_old_company"}]
[Mem0Service] Added 1 messages to memory for session 086e3518c0dea826040a4dd9c91667d4, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Updated session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Saved assistant message to session 086e3518c0dea826040a4dd9c91667d4
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/session-b-1752021381536/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/session-b-1752021381536/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752021381536/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752021381536/settings
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/session-b-1752021381536/messages
[Server] Applying security middleware for GET /api/chats/session-b-1752021381536/settings
[Server] Applying security middleware for PATCH /api/chats/session-b-1752021381536/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/chats/session-b-1752021381536/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752021381536/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752021381536/messages
[Server] Messages endpoint hit: /api/chats/session-b-1752021381536/messages
[Server] Loading messages for session: session-b-1752021381536, offset: 0, limit: 50
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionStorage] Read 4 messages from session session-b-1752021381536
[Server] Security middleware passed for GET /api/chats/session-b-1752021381536/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752021381536/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752021381536/settings
[Server] Security middleware passed for PATCH /api/chats/session-b-1752021381536/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/session-b-1752021381536/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: session-b-1752021381536
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[PostgresSessionIndex] Marked session session-b-1752021381536 as read
[Server] Session marked as read successfully
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2107s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Mem0 context retrieval timed out after 10000ms (10s limit), using minimal context
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/auth/user
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Messages endpoint hit: /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Loading messages for session: 086e3518c0dea826040a4dd9c91667d4, offset: 0, limit: 50
[PostgresSessionStorage] Read 2 messages from session 086e3518c0dea826040a4dd9c91667d4
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Messages endpoint hit: /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Loading messages for session: 086e3518c0dea826040a4dd9c91667d4, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[PostgresSessionStorage] Read 2 messages from session 086e3518c0dea826040a4dd9c91667d4
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2105s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2093s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 086e3518c0dea826040a4dd9c91667d4
[Database Pool] New client connected
[PostgresSessionIndex] Marked session 086e3518c0dea826040a4dd9c91667d4 as read
[Server] Session marked as read successfully
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/memory/postgres/2
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/memory/users
[Server] Security middleware passed for GET /api/memory/postgres/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2003s'
}
[CSRF-Header] Calling next() for GET /api/memory/postgres/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/postgres/2
[Memory API] PostgreSQL visualization request: {
  userId: '2',
  reqUser: {
    id: 2,
    email: 'dev@example.com',
    name: 'Development User',
    groups: [ 'admin' ],
    azureId: 'mock-azure-id'
  },
  isAuthenticated: true,
  headers: {
    host: 'localhost:3000',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0',
    accept: '*/*',
    'accept-language': 'en-US,en;q=0.5',
    'accept-encoding': 'gzip, deflate, br, zstd',
    referer: 'http://localhost:5173/',
    'content-type': 'application/json',
    connection: 'close',
    cookie: 'csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    priority: 'u=0'
  }
}
[Server] Security middleware passed for GET /api/memory/users
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2003s'
}
[CSRF-Header] Calling next() for GET /api/memory/users
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/users
[Server] Applying security middleware for GET /api/memory/postgres/2
[Server] Applying security middleware for GET /api/memory/users
[Server] Security middleware passed for GET /api/memory/postgres/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2003s'
}
[CSRF-Header] Calling next() for GET /api/memory/postgres/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/postgres/2
[Memory API] PostgreSQL visualization request: {
  userId: '2',
  reqUser: {
    id: 2,
    email: 'dev@example.com',
    name: 'Development User',
    groups: [ 'admin' ],
    azureId: 'mock-azure-id'
  },
  isAuthenticated: true,
  headers: {
    host: 'localhost:3000',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0',
    accept: '*/*',
    'accept-language': 'en-US,en;q=0.5',
    'accept-encoding': 'gzip, deflate, br, zstd',
    referer: 'http://localhost:5173/',
    'content-type': 'application/json',
    connection: 'close',
    cookie: 'csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    priority: 'u=0'
  }
}
[Server] Security middleware passed for GET /api/memory/users
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2003s'
}
[CSRF-Header] Calling next() for GET /api/memory/users
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/users
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/memory/neo4j/2
[Server] Security middleware passed for GET /api/memory/neo4j/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '2002s'
}
[CSRF-Header] Calling next() for GET /api/memory/neo4j/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/neo4j/2
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Messages endpoint hit: /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Loading messages for session: 086e3518c0dea826040a4dd9c91667d4, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[PostgresSessionStorage] Read 2 messages from session 086e3518c0dea826040a4dd9c91667d4
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Messages endpoint hit: /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Loading messages for session: 086e3518c0dea826040a4dd9c91667d4, offset: 0, limit: 50
[PostgresSessionStorage] Read 2 messages from session 086e3518c0dea826040a4dd9c91667d4
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1998s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'i live in california',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'i live in california',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'i live in california',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'i live in california',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  activeSessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: 086e3518c0dea826040a4dd9c91667d4, message: "i live in california"
[Server] Sending SSE event: connected { sessionId: '086e3518c0dea826040a4dd9c91667d4' }
[ORCHESTRATOR] Processing with streaming: "i live in california"
[AgentOrchestrator] Selecting agent for session: 086e3518c0dea826040a4dd9c91667d4
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:086e3518c0dea826040a4dd9c91667d4, TTL: none
[AgentOrchestrator] Updated agent history for session 086e3518c0dea826040a4dd9c91667d4: AnalyticalAgent
[MemoryPersistence] Stored key: session:086e3518c0dea826040a4dd9c91667d4, TTL: none
[AgentOrchestrator] Updated user preferences for session 086e3518c0dea826040a4dd9c91667d4: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start {
  agent: 'AnalyticalAgent',
  sessionId: '086e3518c0dea826040a4dd9c91667d4'
}
[AnalyticalAgent] Processing analytical request: "i live in california..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: 086e3518c0dea826040a4dd9c91667d4
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1993s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[StorageManager] Context query - SessionId: 086e3518c0dea826040a4dd9c91667d4, UserId: 2
[Server] Session check took: 1.23ms
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionStorage] Appended message to session 086e3518c0dea826040a4dd9c91667d4, id: 188
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1993s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[DEBUG] Entity type map: {"california":"location"}
[INFO] Returned 4 search results
[Mem0Service] Search for "i live in california" returned 2 results
[Mem0Service] Built context with 2 relevant memories
[Mem0Service] Retrieved 2 memories for session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Built complete context: 2 memories + 3 session messages
[AnalyticalAgent] Context retrieval completed in 2076ms
[AnalyticalAgent] Memory status set: {
  enabled: true,
  memoryCount: 2,
  status: 'loaded',
  retrievalTime: 2076
}
[AnalyticalAgent] Mem0 returned 7 context messages
[AnalyticalAgent] Calling LLM with 7 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 2550.66ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "Thank"
[Server] Sending SSE event: token { content: 'Thank' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1991s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1991s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " for"
[Server] Sending SSE event: token { content: ' for' }
[AnalyticalAgent] Token received: " sharing"
[Server] Sending SSE event: token { content: ' sharing' }
[AnalyticalAgent] Token received: " that"
[Server] Sending SSE event: token { content: ' that' }
[AnalyticalAgent] Token received: " information"
[Server] Sending SSE event: token { content: ' information' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: " If"
[Server] Sending SSE event: token { content: ' If' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " have"
[Server] Sending SSE event: token { content: ' have' }
[AnalyticalAgent] Token received: " any"
[Server] Sending SSE event: token { content: ' any' }
[AnalyticalAgent] Token received: " specific"
[Server] Sending SSE event: token { content: ' specific' }
[AnalyticalAgent] Token received: " questions"
[Server] Sending SSE event: token { content: ' questions' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[AnalyticalAgent] Token received: " need"
[Server] Sending SSE event: token { content: ' need' }
[AnalyticalAgent] Token received: " analysis"
[Server] Sending SSE event: token { content: ' analysis' }
[AnalyticalAgent] Token received: " related"
[Server] Sending SSE event: token { content: ' related' }
[AnalyticalAgent] Token received: " to"
[Server] Sending SSE event: token { content: ' to' }
[AnalyticalAgent] Token received: " living"
[Server] Sending SSE event: token { content: ' living' }
[AnalyticalAgent] Token received: " in"
[Server] Sending SSE event: token { content: ' in' }
[AnalyticalAgent] Token received: " California"
[Server] Sending SSE event: token { content: ' California' }
[AnalyticalAgent] Token received: " or"
[Server] Sending SSE event: token { content: ' or' }
[AnalyticalAgent] Token received: " working"
[Server] Sending SSE event: token { content: ' working' }
[AnalyticalAgent] Token received: " at"
[Server] Sending SSE event: token { content: ' at' }
[AnalyticalAgent] Token received: " Open"
[Server] Sending SSE event: token { content: ' Open' }
[AnalyticalAgent] Token received: "AI"
[Server] Sending SSE event: token { content: 'AI' }
[AnalyticalAgent] Token received: ","
[Server] Sending SSE event: token { content: ',' }
[AnalyticalAgent] Token received: " please"
[Server] Sending SSE event: token { content: ' please' }
[AnalyticalAgent] Token received: " let"
[Server] Sending SSE event: token { content: ' let' }
[AnalyticalAgent] Token received: " me"
[Server] Sending SSE event: token { content: ' me' }
[AnalyticalAgent] Token received: " know"
[Server] Sending SSE event: token { content: ' know' }
[AnalyticalAgent] Token received: " how"
[Server] Sending SSE event: token { content: ' how' }
[AnalyticalAgent] Token received: " I"
[Server] Sending SSE event: token { content: ' I' }
[AnalyticalAgent] Token received: " can"
[Server] Sending SSE event: token { content: ' can' }
[AnalyticalAgent] Token received: " assist"
[Server] Sending SSE event: token { content: ' assist' }
[AnalyticalAgent] Token received: " you"
[Server] Sending SSE event: token { content: ' you' }
[AnalyticalAgent] Token received: " further"
[Server] Sending SSE event: token { content: ' further' }
[AnalyticalAgent] Token received: "!"
[Server] Sending SSE event: token { content: '!' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (194 chars)
[AnalyticalAgent] Final response length: 194 chars
[PERF:Agent] AnalyticalAgent execution: 3473.04ms
[PERF:LLM] unknown - Total: 3473ms, TTFT: 2551ms, Stream: 922ms, TPS: 43.4
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 2,
  "status": "loaded",
  "retrievalTime": 2076
}
[Server] Performance data collected: {
  database: { totalTime: 1.24, operations: { 'check-session': [Object] } },
  agent: { totalTime: 3473.23, selection: 0.15, execution: 3473.04 },
  llm: { totalTime: 3473.07, ttft: 2550.66, tokens: 40 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: '086e3518c0dea826040a4dd9c91667d4',
  memoryStatus: {
    enabled: true,
    memoryCount: 2,
    status: 'loaded',
    retrievalTime: 2076
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 1.24, operations: [Object] },
    agent: { totalTime: 3473.23, selection: 0.15, execution: 3473.04 },
    llm: { totalTime: 3473.07, ttft: 2550.66, tokens: 40 }
  }
}
[Server] Recorded 1 database operations, total: 1.21ms
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[PostgresSessionStorage] Appended message to session 086e3518c0dea826040a4dd9c91667d4, id: 189
[Server] Applying security middleware for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Marked session 086e3518c0dea826040a4dd9c91667d4 as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1989s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/security
[Server] Passed all middleware, continuing to routing for OPTIONS /api/performance/dashboard
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1989s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/performance/dashboard
[Server] Security middleware passed for GET /api/performance/dashboard
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::ffff:127.0.0.1',
  token: '3311f2c812733047fd92...',
  expiresIn: '2039s'
}
[CSRF-Header] Calling next() for GET /api/performance/dashboard
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/performance/dashboard
[Server] Applying security middleware for GET /api/performance/dashboard
[Server] Security middleware passed for GET /api/performance/dashboard
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::ffff:127.0.0.1',
  token: '3311f2c812733047fd92...',
  expiresIn: '2039s'
}
[CSRF-Header] Calling next() for GET /api/performance/dashboard
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/performance/dashboard
[DEBUG] Entity type map: {"california":"location"}
[Server] Applying security middleware for GET /api/memory/neo4j/2
[Server] Applying security middleware for GET /api/memory/users
[Server] Security middleware passed for GET /api/memory/neo4j/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1988s'
}
[CSRF-Header] Calling next() for GET /api/memory/neo4j/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/neo4j/2
[Server] Security middleware passed for GET /api/memory/users
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1988s'
}
[CSRF-Header] Calling next() for GET /api/memory/users
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/users
[Server] Applying security middleware for GET /api/memory/users
[Server] Applying security middleware for GET /api/memory/neo4j/2
[Server] Security middleware passed for GET /api/memory/users
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1988s'
}
[CSRF-Header] Calling next() for GET /api/memory/users
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/users
[Server] Security middleware passed for GET /api/memory/neo4j/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1988s'
}
[CSRF-Header] Calling next() for GET /api/memory/neo4j/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/neo4j/2
[DEBUG] Extracted entities: [{"source":"2","relationship":"lives_in","destination":"california"}]
[Server] Applying security middleware for GET /api/memory/postgres/2
[Server] Security middleware passed for GET /api/memory/postgres/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1986s'
}
[CSRF-Header] Calling next() for GET /api/memory/postgres/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/postgres/2
[Memory API] PostgreSQL visualization request: {
  userId: '2',
  reqUser: {
    id: 2,
    email: 'dev@example.com',
    name: 'Development User',
    groups: [ 'admin' ],
    azureId: 'mock-azure-id'
  },
  isAuthenticated: true,
  headers: {
    host: 'localhost:3000',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0',
    accept: '*/*',
    'accept-language': 'en-US,en;q=0.5',
    'accept-encoding': 'gzip, deflate, br, zstd',
    referer: 'http://localhost:5173/',
    'content-type': 'application/json',
    connection: 'close',
    cookie: 'csrf-token=35df05ba8b635642ef729f6b3daf000e8da648997eb31560f109eb03703a3e75; __clerk_db_jwt=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __clerk_db_jwt_V2yMOE4L=dvb_2xmQKiP9oYwSBQDLMbuk5qM6gg4; __refresh_V2yMOE4L=0FJugPnAVOoi9OcIw0OI; __stripe_mid=daa7a403-a976-41a6-bd5e-a74a3c2e7350d26f1a; __client_uat_V2yMOE4L=1748540712; __client_uat=1748540712; ajs_anonymous_id=16c3dabe-0d11-4c8c-9a7e-bb6eb5c04109; sb-mndbkvmozigubebfjazg-auth-token=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWxsVFlYRkpjVEpLV2sxb1lucGtTak1pTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDIxdVpHSnJkbTF2ZW1sbmRXSmxZbVpxWVhwbkxuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmlPR1UwTUdGaFlTMDFORGhqTFRReU1XVXRPVEJoWkMwMVlUSTNPVFZoTmpRd05qTWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpRNU56a3dOak15TENKcFlYUWlPakUzTkRrM09EY3dNeklzSW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSndhRzl1WlNJNklpSXNJbUZ3Y0Y5dFpYUmhaR0YwWVNJNmV5SndjbTkyYVdSbGNpSTZJbVZ0WVdsc0lpd2ljSEp2ZG1sa1pYSnpJanBiSW1WdFlXbHNJbDE5TENKMWMyVnlYMjFsZEdGa1lYUmhJanA3SW1WdFlXbHNJam9pYzJWaGJrQmpjbTl6YzJkbGJpMWhhUzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpY0dodmJtVmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSnpkV0lpT2lKaU9HVTBNR0ZoWVMwMU5EaGpMVFF5TVdVdE9UQmhaQzAxWVRJM09UVmhOalF3TmpNaWZTd2ljbTlzWlNJNkltRjFkR2hsYm5ScFkyRjBaV1FpTENKaFlXd2lPaUpoWVd3eElpd2lZVzF5SWpwYmV5SnRaWFJvYjJRaU9pSnRZV2RwWTJ4cGJtc2lMQ0owYVcxbGMzUmhiWEFpT2pFM05EazNNRFU1TkROOVhTd2ljMlZ6YzJsdmJsOXBaQ0k2SW1VNU9ERXpZemM1TFRoa05tSXRORGRqWkMxaE1UQXhMVEJqWW1JMk5UUTVNREZsTUNJc0ltbHpYMkZ1YjI1NWJXOTFjeUk2Wm1Gc2MyVjkuUzE3dVZUYlAyeVBDOFl2STdoODNjMWpwaU9RcTRLUnpkU3lsNF9UTGVLcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJleHBpcmVzX2luIjozNjAwLCJleHBpcmVzX2F0IjoxNzQ5NzkwNjMyLCJyZWZyZXNoX3Rva2VuIjoiZTZ2Y2M0M2g1YmN1IiwidXNlciI6eyJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF9jb25maXJtZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjU3LjIzMzk2OVoiLCJwaG9uZSI6IiIsImNvbmZpcm1hdGlvbl9zZW50X2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MTA2MzhaIiwiY29uZmlybWVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTo1Ny4yMzM5NjlaIiwicmVjb3Zlcnlfc2VudF9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6MjkuNDk5MDAzWiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MjU6NDMuNDE4NDI3WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwiaWRlbnRpdGllcyI6W3siaWRlbnRpdHlfaWQiOiIyOGFhNTRiNy0zMzg1LTRmMmQtODk0NS1hNTgzOWI0M2EwMzciLCJpZCI6ImI4ZTQwYWFhLTU0OGMtNDIxZS05MGFkLTVhMjc5NWE2NDA2MyIsInVzZXJfaWQiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMiLCJpZGVudGl0eV9kYXRhIjp7ImVtYWlsIjoic2VhbkBjcm9zc2dlbi1haS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJiOGU0MGFhYS01NDhjLTQyMWUtOTBhZC01YTI3OTVhNjQwNjMifSwicHJvdmlkZXIiOiJlbWFpbCIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNzAzOTIxWiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA2LTEyVDA1OjE5OjMzLjcwMzk3NloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0wNi0xMlQwNToxOTozMy43MDM5NzZaIiwiZW1haWwiOiJzZWFuQGNyb3NzZ2VuLWFpLmNvbSJ9XSwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMTJUMDU6MTk6MzMuNjk0NDg4WiIsInVwZGF0ZWRfYXQiOiIyMDI1LTA2LTEzVDAzOjU3OjEyLjQ3MTM4MVoiLCJpc19hbm9ueW1vdXMiOmZhbHNlfX0; __next_hmr_refresh_hash__=4; clerk_active_context=sess_2xmQLQ1hrLhu3kWzzSCqkLJ55He:; _streamlit_xsrf=2|76550659|b063f4ad24cd7e161e301a5cd5841df5|1749348860',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    priority: 'u=0'
  }
}
[DEBUG] Entity type map: {"california":"location","openai":"organization"}
[DEBUG] Deleted relationships: [{"source":"california","relationship":"is_a_location","destination":"2"},{"source":"california","relationship":"has","destination":"policy_impacts"},{"source":"california","relationship":"has","destination":"demographic_data"},{"source":"california","relationship":"has","destination":"economic_trends"}]
[Server] Applying security middleware for GET /api/memory/neo4j/2
[Server] Security middleware passed for GET /api/memory/neo4j/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1985s'
}
[CSRF-Header] Calling next() for GET /api/memory/neo4j/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/neo4j/2
[DEBUG] Extracted entities: [{"source":"california","relationship":"related_to","destination":"living"},{"source":"openai","relationship":"related_to","destination":"working"}]
[Mem0Service] Added 1 messages to memory for session 086e3518c0dea826040a4dd9c91667d4, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Saved user message to session 086e3518c0dea826040a4dd9c91667d4
[PERF:DB] Slow query 'save-user-message': 9603.99ms
[Server] Message save took: 9604.03ms
[Server] Total session operations took: 9605.28ms
[AnalyticalAgent] Mem0 context retrieval timed out after 9999ms (10s limit), using minimal context
[DEBUG] Deleted relationships: []
[Mem0Service] Added 1 messages to memory for session 086e3518c0dea826040a4dd9c91667d4, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session 086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Updated session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Saved assistant message to session 086e3518c0dea826040a4dd9c91667d4
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/memory/qdrant/2
[Server] Security middleware passed for GET /api/memory/qdrant/2
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1965s'
}
[CSRF-Header] Calling next() for GET /api/memory/qdrant/2
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/memory/qdrant/2
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1954s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[PostgresSessionIndex] Updated session d8628fb1fd813cef3ca02b43734dc7ba
[Database Pool] New client connected
[PostgresSessionIndex] Updated session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PostgresSessionIndex] Updated session session-a-1752022390346
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/auth/user
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/messages
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/messages
[Server] Messages endpoint hit: /api/chats/session-a-1752022390346/messages
[Server] Loading messages for session: session-a-1752022390346, offset: 0, limit: 50
[PostgresSessionStorage] Read 5 messages from session session-a-1752022390346
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/messages
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/messages
[Server] Messages endpoint hit: /api/chats/session-a-1752022390346/messages
[Server] Loading messages for session: session-a-1752022390346, offset: 0, limit: 50
[PostgresSessionStorage] Read 5 messages from session session-a-1752022390346
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/slash-commands
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/slash-commands
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/slash-commands
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/slash-commands
[SlashCommandService] Built maps: 6 commands, 24 aliases
[SlashCommandService] Loaded 6 slash commands
[SlashCommands] Served 6 commands to client
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1386s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/auth/user
[Server] Applying security middleware for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Security middleware passed for GET /api/auth/user
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/auth/user
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/auth/user
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/config/security
[Server] Applying security middleware for GET /api/chats
[Server] Applying security middleware for GET /api/chats
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Security middleware passed for GET /api/chats
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/chats
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats
[Server] Listing chats for user: 2
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1381s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/messages
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Applying security middleware for GET /api/chats/session-a-1752022390346/messages
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/messages
[Server] Messages endpoint hit: /api/chats/session-a-1752022390346/messages
[Server] Loading messages for session: session-a-1752022390346, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/settings
[PostgresSessionStorage] Read 5 messages from session session-a-1752022390346
[Server] Security middleware passed for GET /api/chats/session-a-1752022390346/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022390346/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022390346/messages
[Server] Messages endpoint hit: /api/chats/session-a-1752022390346/messages
[Server] Loading messages for session: session-a-1752022390346, offset: 0, limit: 50
[PostgresSessionStorage] Read 5 messages from session session-a-1752022390346
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1380s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/security
[Server] Security middleware passed for GET /api/config/security
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/security
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/security
[Server] Applying security middleware for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] Security middleware passed for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] Messages endpoint hit: /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/messages
[Server] Loading messages for session: a3e4ca7b3cedce4f6bcbe4d454d2aa33, offset: 0, limit: 50
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] Applying security middleware for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] Security middleware passed for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33/settings
[PostgresSessionStorage] Read 2 messages from session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Database Pool] New client connected
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for DELETE /api/chats/session-a-1752022390346
[Server] Security middleware passed for DELETE /api/chats/session-a-1752022390346
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/session-a-1752022390346
[PostgresSessionIndex] Updated session session-a-1752022390346
[StorageManager] Soft deleted session session-a-1752022390346
[Server] Applying security middleware for DELETE /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33
[Server] Security middleware passed for DELETE /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/a3e4ca7b3cedce4f6bcbe4d454d2aa33
[PostgresSessionIndex] Updated session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[StorageManager] Soft deleted session a3e4ca7b3cedce4f6bcbe4d454d2aa33
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Applying security middleware for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Messages endpoint hit: /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/messages
[Server] Loading messages for session: d8628fb1fd813cef3ca02b43734dc7ba, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/settings
[PostgresSessionStorage] Read 4 messages from session d8628fb1fd813cef3ca02b43734dc7ba
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1173s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Database Pool] New client connected
[Server] Applying security middleware for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/d8628fb1fd813cef3ca02b43734dc7ba/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: d8628fb1fd813cef3ca02b43734dc7ba
[Database Pool] New client connected
[PostgresSessionIndex] Marked session d8628fb1fd813cef3ca02b43734dc7ba as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/086e3518c0dea826040a4dd9c91667d4/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 086e3518c0dea826040a4dd9c91667d4
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[PostgresSessionIndex] Marked session 086e3518c0dea826040a4dd9c91667d4 as read
[Server] Session marked as read successfully
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Applying security middleware for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Messages endpoint hit: /api/chats/086e3518c0dea826040a4dd9c91667d4/messages
[Server] Loading messages for session: 086e3518c0dea826040a4dd9c91667d4, offset: 0, limit: 50
[PostgresSessionStorage] Read 4 messages from session 086e3518c0dea826040a4dd9c91667d4
[Server] Security middleware passed for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/086e3518c0dea826040a4dd9c91667d4/settings
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] Applying security middleware for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/37a01b64e39ce7de599b23b5ff44995d/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 37a01b64e39ce7de599b23b5ff44995d
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] Messages endpoint hit: /api/chats/37a01b64e39ce7de599b23b5ff44995d/messages
[Server] Loading messages for session: 37a01b64e39ce7de599b23b5ff44995d, offset: 0, limit: 50
[PostgresSessionIndex] Marked session 37a01b64e39ce7de599b23b5ff44995d as read
[Server] Session marked as read successfully
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/37a01b64e39ce7de599b23b5ff44995d/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[PostgresSessionStorage] Read 2 messages from session 37a01b64e39ce7de599b23b5ff44995d
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1119s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Applying security middleware for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Messages endpoint hit: /api/chats/28a217295ad46a6e76096ffb63e3f1af/messages
[Server] Loading messages for session: 28a217295ad46a6e76096ffb63e3f1af, offset: 0, limit: 50
[Server] Applying security middleware for PATCH /api/chats/28a217295ad46a6e76096ffb63e3f1af/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[PostgresSessionStorage] Read 2 messages from session 28a217295ad46a6e76096ffb63e3f1af
[Server] Security middleware passed for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/28a217295ad46a6e76096ffb63e3f1af/settings
[Server] Security middleware passed for PATCH /api/chats/28a217295ad46a6e76096ffb63e3f1af/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/28a217295ad46a6e76096ffb63e3f1af/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: 28a217295ad46a6e76096ffb63e3f1af
[PostgresSessionIndex] Marked session 28a217295ad46a6e76096ffb63e3f1af as read
[Server] Session marked as read successfully
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1118s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for DELETE /api/chats/d8628fb1fd813cef3ca02b43734dc7ba
[Server] Security middleware passed for DELETE /api/chats/d8628fb1fd813cef3ca02b43734dc7ba
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/d8628fb1fd813cef3ca02b43734dc7ba
[PostgresSessionIndex] Updated session d8628fb1fd813cef3ca02b43734dc7ba
[StorageManager] Soft deleted session d8628fb1fd813cef3ca02b43734dc7ba
[Server] Applying security middleware for DELETE /api/chats/086e3518c0dea826040a4dd9c91667d4
[Server] Security middleware passed for DELETE /api/chats/086e3518c0dea826040a4dd9c91667d4
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/086e3518c0dea826040a4dd9c91667d4
[PostgresSessionIndex] Updated session 086e3518c0dea826040a4dd9c91667d4
[StorageManager] Soft deleted session 086e3518c0dea826040a4dd9c91667d4
[Server] Applying security middleware for DELETE /api/chats/37a01b64e39ce7de599b23b5ff44995d
[Server] Security middleware passed for DELETE /api/chats/37a01b64e39ce7de599b23b5ff44995d
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/37a01b64e39ce7de599b23b5ff44995d
[PostgresSessionIndex] Updated session 37a01b64e39ce7de599b23b5ff44995d
[StorageManager] Soft deleted session 37a01b64e39ce7de599b23b5ff44995d
[Server] Applying security middleware for DELETE /api/chats/28a217295ad46a6e76096ffb63e3f1af
[Server] Security middleware passed for DELETE /api/chats/28a217295ad46a6e76096ffb63e3f1af
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/28a217295ad46a6e76096ffb63e3f1af
[PostgresSessionIndex] Updated session 28a217295ad46a6e76096ffb63e3f1af
[StorageManager] Soft deleted session 28a217295ad46a6e76096ffb63e3f1af
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/messages
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/settings
[Server] Applying security middleware for GET /api/chats/session-b-1752022918798/settings
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/messages
[Server] Messages endpoint hit: /api/chats/session-b-1752022918798/messages
[Server] Loading messages for session: session-b-1752022918798, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[PostgresSessionStorage] Read 2 messages from session session-b-1752022918798
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/settings
[Server] Security middleware passed for GET /api/chats/session-b-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-b-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-b-1752022918798/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1113s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[applyMiddleware] Checking body for POST - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'session-b-1752022918798',
  activeSessionId: 'session-b-1752022918798'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for POST /api/chat/stream
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'session-b-1752022918798',
  activeSessionId: 'session-b-1752022918798'
}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1105s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for POST /api/chat/stream
[Server] About to apply CSRF header middleware...
[applyMiddleware] Checking body for POST - req.body: {
  message: 'what is my name?',
  sessionId: 'session-b-1752022918798',
  activeSessionId: 'session-b-1752022918798'
}
[applyMiddleware] Body already parsed, skipping parseBody
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for POST /api/chat/stream
[Server] SSE streaming endpoint hit
[Server] Processing SSE request
[Server] req.body: {
  message: 'what is my name?',
  sessionId: 'session-b-1752022918798',
  activeSessionId: 'session-b-1752022918798'
}
[Server] Performance monitoring enabled for SSE request
[Server] Streaming request for session: session-b-1752022918798, message: "what is my name?"
[Server] Sending SSE event: connected { sessionId: 'session-b-1752022918798' }
[ORCHESTRATOR] Processing with streaming: "what is my name?"
[AgentOrchestrator] Selecting agent for session: session-b-1752022918798
[AgentOrchestrator] User preferences: {}
[MemoryPersistence] Stored key: session:session-b-1752022918798, TTL: none
[AgentOrchestrator] Updated agent history for session session-b-1752022918798: AnalyticalAgent
[MemoryPersistence] Stored key: session:session-b-1752022918798, TTL: none
[AgentOrchestrator] Updated user preferences for session session-b-1752022918798: { lastAgentUsed: 'AnalyticalAgent' }
[AgentOrchestrator] Selected agent: AnalyticalAgent (confidence: 0.1)
[ORCHESTRATOR] Selected AnalyticalAgent for streaming
[Server] Sending SSE event: start { agent: 'AnalyticalAgent', sessionId: 'session-b-1752022918798' }
[AnalyticalAgent] Processing analytical request: "what is my name?..."
[AnalyticalAgent] Detected task type: general
[AnalyticalAgent] Using Mem0 for context retrieval
[AnalyticalAgent] Starting Mem0 context retrieval...
[Server] Starting deferred session operations for: session-b-1752022918798
[StorageManager] Context query - SessionId: session-b-1752022918798, UserId: 2
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1105s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Session check took: 7.56ms
[PostgresSessionStorage] Appended message to session session-b-1752022918798, id: 190
[DEBUG] Entity type map: {"my":"self_reference"}
[INFO] Returned 1 search results
[Mem0Service] Search for "what is my name?" returned 3 results
[Mem0Service] Built context with 3 relevant memories
[Mem0Service] Retrieved 3 memories for session session-b-1752022918798
[StorageManager] Built complete context: 3 memories + 3 session messages
[AnalyticalAgent] Context retrieval completed in 3566ms
[AnalyticalAgent] Memory status set: {
  enabled: true,
  memoryCount: 3,
  status: 'loaded',
  retrievalTime: 3566
}
[AnalyticalAgent] Mem0 returned 8 context messages
[AnalyticalAgent] Calling LLM with 8 messages (including conversation history)
[AnalyticalAgent] streamCallback type: function, value: (token) => {
                    if (timers.llm && !firstTokenReceived && typeof token === 'string') {
                        timers.llm.markFirstTokenReceived();
                        firstTokenReceived = true;
                    }
                    if (typeof token === 'string') {
                        tokenCount++;
                    }
                    streamCallback(token);
                }
[AnalyticalAgent] Streaming mode enabled
[LLMHelper] Creating ChatLLM with provider: openai, model: gpt-4o, streaming: true
[AnalyticalAgent] Token received: ""
[PERF:LLM] Slow TTFT for unknown: 4014.04ms
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Token received: "Your"
[Server] Sending SSE event: token { content: 'Your' }
[AnalyticalAgent] Token received: " name"
[Server] Sending SSE event: token { content: ' name' }
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1101s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1101s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[AnalyticalAgent] Token received: " is"
[Server] Sending SSE event: token { content: ' is' }
[AnalyticalAgent] Token received: " Sean"
[Server] Sending SSE event: token { content: ' Sean' }
[AnalyticalAgent] Token received: "."
[Server] Sending SSE event: token { content: '.' }
[AnalyticalAgent] Token received: ""
[Server] Sending SSE event: token { content: '' }
[AnalyticalAgent] Streaming completed (18 chars)
[AnalyticalAgent] Final response length: 18 chars
[PERF:Agent] AnalyticalAgent execution: 4158.05ms
[PERF:LLM] unknown - Total: 4158ms, TTFT: 4014ms, Stream: 144ms, TPS: 48.6
[DEBUG] Memory status type: object
[DEBUG] Memory status: {
  "enabled": true,
  "memoryCount": 3,
  "status": "loaded",
  "retrievalTime": 3566
}
[Server] Performance data collected: {
  database: { totalTime: 7.58, operations: { 'check-session': [Object] } },
  agent: { totalTime: 4158.35, selection: 0.26, execution: 4158.05 },
  llm: { totalTime: 4158.06, ttft: 4014.04, tokens: 7 }
}
[Server] Sending SSE event: done {
  agent: 'AnalyticalAgent',
  agentType: 'analytical',
  sessionId: 'session-b-1752022918798',
  memoryStatus: {
    enabled: true,
    memoryCount: 3,
    status: 'loaded',
    retrievalTime: 3566
  },
  orchestration: {
    confidence: 1,
    streaming: true,
    forcedBySlashCommand: false,
    commandUsed: undefined
  },
  performance: {
    database: { totalTime: 7.58, operations: [Object] },
    agent: { totalTime: 4158.35, selection: 0.26, execution: 4158.05 },
    llm: { totalTime: 4158.06, ttft: 4014.04, tokens: 7 }
  }
}
[Server] Recorded 1 database operations, total: 7.55ms
[PostgresSessionStorage] Appended message to session session-b-1752022918798, id: 191
[applyMiddleware] Checking body for PATCH - req.body: null
[applyMiddleware] Body not parsed, calling parseBody...
[parseBody] Body parsed successfully
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Applying security middleware for PATCH /api/chats/session-b-1752022918798/read
[applyMiddleware] Checking body for PATCH - req.body: {}
[applyMiddleware] Body already parsed, skipping parseBody
[Server] Security middleware passed for PATCH /api/chats/session-b-1752022918798/read
[Server] About to apply CSRF header middleware...
[Server] Skipping CSRF for auth/read/config endpoint
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for PATCH /api/chats/session-b-1752022918798/read
[Server] PATCH /api/chats/:id/read endpoint hit
[Server] req.body: {}
[Server] Marking session as read: session-b-1752022918798
[PostgresSessionIndex] Marked session session-b-1752022918798 as read
[Server] Session marked as read successfully
[DEBUG] Entity type map: {"my":"self-reference"}
[DEBUG] Extracted entities: [{"source":"2","relationship":"has_name","destination":"my"}]
[DEBUG] Entity type map: {"sean":"person"}
[DEBUG] Deleted relationships: [{"source":"2","relationship":"has_name","destination":"my"}]
[DEBUG] Extracted entities: [{"source":"2","relationship":"is_named","destination":"sean"}]
[AnalyticalAgent] Mem0 context retrieval timed out after 10000ms (10s limit), using minimal context
[Mem0Service] Added 1 messages to memory for session session-b-1752022918798, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session session-b-1752022918798
[StorageManager] Saved user message to session session-b-1752022918798
[PERF:DB] Slow query 'save-user-message': 11145.52ms
[Server] Message save took: 11145.53ms
[Server] Total session operations took: 11153.11ms
[DEBUG] Deleted relationships: [{"source":"sean","relationship":"is","destination":"name"},{"source":"sean","relationship":"is_offered_assistance_for","destination":"analytical_tasks"}]
[Mem0Service] Added 1 messages to memory for session session-b-1752022918798, user 2
[PostgresSessionIndex] Message count auto-incremented by trigger for session session-b-1752022918798
[PostgresSessionIndex] Updated session session-b-1752022918798
[StorageManager] Saved assistant message to session session-b-1752022918798
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/chats/session-a-1752022918798/settings
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for DELETE /api/chats/session-b-1752022918798
[Server] Applying security middleware for GET /api/chats/session-a-1752022918798/messages
[Server] Applying security middleware for GET /api/chats/session-a-1752022918798/settings
[Server] Security middleware passed for GET /api/chats/session-a-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022918798/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for DELETE /api/chats/session-b-1752022918798
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/session-b-1752022918798
[Server] Security middleware passed for GET /api/chats/session-a-1752022918798/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022918798/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022918798/messages
[Server] Messages endpoint hit: /api/chats/session-a-1752022918798/messages
[Server] Loading messages for session: session-a-1752022918798, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/session-a-1752022918798/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/chats/session-a-1752022918798/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/session-a-1752022918798/settings
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Database Pool] New client connected
[Server] Applying security middleware for GET /api/config/markdown
[Database Pool] New client connected
[PostgresSessionStorage] Read 3 messages from session session-a-1752022918798
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[PostgresSessionIndex] Updated session session-b-1752022918798
[StorageManager] Soft deleted session session-b-1752022918798
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for DELETE /api/chats/session-a-1752022918798
[Server] Security middleware passed for DELETE /api/chats/session-a-1752022918798
[Server] About to apply CSRF header middleware...
[CSRF-Header] Bypassing CSRF validation in development mode
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for DELETE /api/chats/session-a-1752022918798
[PostgresSessionIndex] Updated session session-a-1752022918798
[StorageManager] Soft deleted session session-a-1752022918798
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] Applying security middleware for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/messages
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] Security middleware passed for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/messages
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/messages
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/messages
[Server] Messages endpoint hit: /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/messages
[Server] Loading messages for session: 2d5a4ab95f51e0d0b83645106ca8720b, offset: 0, limit: 50
[Server] Security middleware passed for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/chats/2d5a4ab95f51e0d0b83645106ca8720b/settings
[PostgresSessionStorage] Read 4 messages from session 2d5a4ab95f51e0d0b83645106ca8720b
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
[Server] Applying security middleware for GET /api/config/markdown
[Server] Security middleware passed for GET /api/config/markdown
[Server] About to apply CSRF header middleware...
[CSRF-Header] Using existing token: {
  sessionId: '::1',
  token: 'f13a519dc14e457b52fa...',
  expiresIn: '1066s'
}
[CSRF-Header] Calling next() for GET /api/config/markdown
[Server] CSRF header middleware completed
[Server] Passed all middleware, continuing to routing for GET /api/config/markdown
