[project]
name = "chatsg-mem0-service"
version = "0.1.0"
description = "Python service for Mem0 memory management with Azure OpenAI support"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "ChatSG Team", email = "team@chatsg.com"},
]
maintainers = [
    {name = "ChatSG Team", email = "team@chatsg.com"},
]
keywords = ["mem0", "memory", "fastapi", "azure", "openai", "chatsg"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"
dependencies = [
    # Web framework
    "fastapi>=0.109.0,<1.0.0",
    "uvicorn[standard]>=0.27.0,<1.0.0",
    
    # Core dependencies
    "mem0ai>=0.1.114,<0.2.0",
    "openai>=1.0.0,<2.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    
    # HTTP clients
    "httpx>=0.25.0,<1.0.0",
    "requests>=2.31.0,<3.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    
    # Azure support
    "azure-search-documents>=11.4.0,<12.0.0",
    "azure-core>=1.30.0,<2.0.0",
    "azure-common>=1.1.0,<2.0.0",
    
    # Vector database
    "qdrant-client>=1.7.0,<2.0.0",
    
    # Data processing
    "numpy>=1.24.0,<2.0.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    
    # Utilities
    "tqdm>=4.65.0,<5.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "typing-extensions>=4.8.0,<5.0.0",
    "typing-inspect>=0.4.0,<1.0.0",
    
    # Monitoring
    "posthog>=3.0.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/CrossGen-ai/chatSG"
Repository = "https://github.com/CrossGen-ai/chatSG"
Documentation = "https://github.com/CrossGen-ai/chatSG/tree/main/docs"
"Bug Tracker" = "https://github.com/CrossGen-ai/chatSG/issues"

[project.scripts]
chatsg-mem0 = "src.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests",
    "httpx",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
]
neo4j = [
    "langchain-neo4j>=0.1.0",
    "neo4j>=5.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
]

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
    "--capture=no",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mem0ai.*",
    "qdrant_client.*",
    "langchain_neo4j.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true